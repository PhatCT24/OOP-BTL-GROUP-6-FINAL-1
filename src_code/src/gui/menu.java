/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import code_and_db.Admin;
import code_and_db.Books;
import code_and_db.Reader;
import code_and_db.Ticket;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.ImageIcon;
import java.awt.Image;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.Timer;
/**
 *
 * @author DELL
 */
public class menu extends javax.swing.JFrame {

    /**
     * Creates new form menu
     */
    public menu() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setSmoothScale();
        startColorAnimation();
        //đặt trạng thái panel của updateticket
        StatusComboBox1.setVisible(false);
        UpdateTicketInfo_Field.setVisible(false);
    }
    //set màu cho welcome panel
    private Color[] rainbowColors = {
        Color.RED,
        Color.ORANGE,
        Color.YELLOW,
        Color.GREEN,
        Color.CYAN,
        Color.BLUE,
        Color.MAGENTA
    };
    private int clrIndex = 0; // đặt giá trị màu khởi tạo = 0
    
    public void startColorAnimation(){
        Timer timer = new Timer(300, new ActionListener() {// đặt timer đổi màu mỗi 0,2s
        @Override
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            // Cập nhật màu của welcomelabel
            welcomelabel.setForeground(rainbowColors[clrIndex]);
            
            // Chuyển sang màu tiếp theo
            clrIndex = (clrIndex + 1) % rainbowColors.length;
        }
    });
    timer.start(); // Bắt đầu Timer
    }
    public void setSmoothScale(){
        ImageIcon icon = new ImageIcon("src/resources/main menu background.gif");
        Image img = icon.getImage();
        Image scaledImg = img.getScaledInstance(menubackground.getWidth(), menubackground.getHeight(), Image.SCALE_DEFAULT);
        menubackground.setIcon(new ImageIcon(scaledImg));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BookPopUpMenu = new javax.swing.JPopupMenu();
        AddBook = new javax.swing.JMenuItem();
        RemoveBook = new javax.swing.JMenuItem();
        FindBook = new javax.swing.JMenuItem();
        UpdateBook = new javax.swing.JMenuItem();
        ReaderPopUpMenu = new javax.swing.JPopupMenu();
        AddReader = new javax.swing.JMenuItem();
        RemoveReader = new javax.swing.JMenuItem();
        FindReader = new javax.swing.JMenuItem();
        UpdateReader = new javax.swing.JMenuItem();
        ChooseUpdateUserbuttongroup = new javax.swing.ButtonGroup();
        ChooseUpdateBookbuttongroup = new javax.swing.ButtonGroup();
        TicketPopUpMenu = new javax.swing.JPopupMenu();
        AddTicket = new javax.swing.JMenuItem();
        RemoveTicket = new javax.swing.JMenuItem();
        FindTicket = new javax.swing.JMenuItem();
        UpdateTicket = new javax.swing.JMenuItem();
        ChooseUpdateTicketbuttongroup = new javax.swing.ButtonGroup();
        menu_background = new javax.swing.JPanel();
        home_icon = new javax.swing.JLabel();
        ToLogOut = new javax.swing.JButton();
        ToBorrowTicketMenu = new javax.swing.JButton();
        ToReaderMenu = new javax.swing.JButton();
        ToBookMenu = new javax.swing.JButton();
        HomeButton = new javax.swing.JButton();
        content_menubackground = new javax.swing.JPanel();
        design_by = new javax.swing.JPanel();
        group_6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        MenuMainScreen = new javax.swing.JTabbedPane();
        Welcome = new javax.swing.JPanel();
        welcomelabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        menubackground = new javax.swing.JLabel();
        AddBooks = new javax.swing.JPanel();
        Bookname_Field = new javax.swing.JTextField();
        Book_Name = new javax.swing.JLabel();
        Category = new javax.swing.JLabel();
        Publisher = new javax.swing.JLabel();
        Author = new javax.swing.JLabel();
        Publisher_Field = new javax.swing.JTextField();
        Category_Field = new javax.swing.JTextField();
        Author_Field = new javax.swing.JTextField();
        AddBookbutton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Quantity = new javax.swing.JLabel();
        Quantity_Field = new javax.swing.JTextField();
        ID_Field = new javax.swing.JTextField();
        ID = new javax.swing.JLabel();
        FindBooks = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        FindIDBooks = new javax.swing.JLabel();
        FindIDBook_Field = new javax.swing.JTextField();
        FindCategory = new javax.swing.JLabel();
        FindCategory_Field = new javax.swing.JTextField();
        FindBookName = new javax.swing.JLabel();
        FindName_Field = new javax.swing.JTextField();
        FindAuthor = new javax.swing.JLabel();
        FindAuthor_Field = new javax.swing.JTextField();
        FindBookbutton = new javax.swing.JButton();
        FindTablepanel = new javax.swing.JPanel();
        FindScrollpane = new javax.swing.JScrollPane();
        FindTable = new javax.swing.JTable();
        AddReaders = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        Username_Field = new javax.swing.JTextField();
        Username = new javax.swing.JLabel();
        Gender = new javax.swing.JLabel();
        Gender_Field = new javax.swing.JTextField();
        Contact_number = new javax.swing.JLabel();
        Contactnumber_Field = new javax.swing.JTextField();
        AddUserbutton = new javax.swing.JButton();
        CCCD = new javax.swing.JLabel();
        CCCD_Field = new javax.swing.JTextField();
        FindReaders = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        FindUserCCCD = new javax.swing.JLabel();
        FindUserCCCD_Field = new javax.swing.JTextField();
        FindGender = new javax.swing.JLabel();
        FindUserGender_Field = new javax.swing.JTextField();
        FindUserName = new javax.swing.JLabel();
        FindUserName_Field = new javax.swing.JTextField();
        FindUserbutton = new javax.swing.JButton();
        FindUserTablepane = new javax.swing.JPanel();
        FindUserScrollPane = new javax.swing.JScrollPane();
        FindUserTable = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        FindUserContact_number_Field = new javax.swing.JTextField();
        UpdateReaders = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        CCCDReaderUpdate = new javax.swing.JLabel();
        CCCDReaderUpdate_Field = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        UpdateUserpanel = new javax.swing.JPanel();
        ContactNumberUpdateRadiobutton = new javax.swing.JRadioButton();
        GenderUpdateRadiobutton = new javax.swing.JRadioButton();
        NameUpdateRadiobutton = new javax.swing.JRadioButton();
        UpdateUserInfo_Field = new javax.swing.JTextField();
        UpdateUserInfobutton = new javax.swing.JButton();
        UpdateBooks = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        IDBookUpdate = new javax.swing.JLabel();
        IDBookUpdate_Field = new javax.swing.JTextField();
        UpdateBookpanel = new javax.swing.JPanel();
        CategoryUpdateRadiobutton = new javax.swing.JRadioButton();
        QuantityUpdateRadiobutton = new javax.swing.JRadioButton();
        NameBookUpdateRadiobutton = new javax.swing.JRadioButton();
        UpdateBookInfo_Field = new javax.swing.JTextField();
        UpdateBookInfobutton = new javax.swing.JButton();
        PublisherUpdateRadiobutton = new javax.swing.JRadioButton();
        AuthorUpdateRadiobutton = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        RemoveReaders = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        CCCDUser = new javax.swing.JLabel();
        UserRemove_Field = new javax.swing.JTextField();
        RemoveUserbutton = new javax.swing.JButton();
        RemoveBooks = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        ID_BOOK = new javax.swing.JLabel();
        removeID_Field = new javax.swing.JTextField();
        RemoveBookbutton = new javax.swing.JButton();
        AddTickets = new javax.swing.JPanel();
        AddReturn_date = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        AddTicketID_Field = new javax.swing.JTextField();
        TicketID = new javax.swing.JLabel();
        ADDTicketCCCD = new javax.swing.JLabel();
        AddTicketCCCD_Field = new javax.swing.JTextField();
        AddReturn_Date_Field = new javax.swing.JTextField();
        AddBorrow_Date = new javax.swing.JLabel();
        AddBorrow_Date_Field = new javax.swing.JTextField();
        AddBook_ID_Ticket_Field = new javax.swing.JTextField();
        AddBook_ID = new javax.swing.JLabel();
        AddTicketbutton = new javax.swing.JButton();
        AddNoteTicket_Field = new javax.swing.JTextField();
        AddNoteTicket = new javax.swing.JLabel();
        RemoveTickets = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        ID_BOOK1 = new javax.swing.JLabel();
        removeID_Field1 = new javax.swing.JTextField();
        RemoveBookbutton1 = new javax.swing.JButton();
        FindTickets = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        CCCDTicket = new javax.swing.JLabel();
        BookIDTicket_Field = new javax.swing.JTextField();
        BookIDTicket = new javax.swing.JLabel();
        CCCDTicket_Field = new javax.swing.JTextField();
        TicketBorrowPanel = new javax.swing.JPanel();
        TicketBorrowScrollPane = new javax.swing.JScrollPane();
        TicketBorrowTable = new javax.swing.JTable();
        ReturnTicketButton = new javax.swing.JButton();
        TicketID_Field = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        StatusComboBox = new javax.swing.JComboBox<>();
        UpdateTickets = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        TicketIDUpdate = new javax.swing.JLabel();
        TicketIDUpdate_Field = new javax.swing.JTextField();
        UpdateTicketpanel = new javax.swing.JPanel();
        BookIDUpdateradiobutton = new javax.swing.JRadioButton();
        Borrow_dateUpdateradiobutton = new javax.swing.JRadioButton();
        CCCDUpdateradiobutton = new javax.swing.JRadioButton();
        UpdateTicketInfo_Field = new javax.swing.JTextField();
        UpdateUserInfobutton1 = new javax.swing.JButton();
        Return_dateUpdateradiobutton = new javax.swing.JRadioButton();
        StatusUpdateradiobutton = new javax.swing.JRadioButton();
        StatusComboBox1 = new javax.swing.JComboBox<>();
        NoteUpdateRadiobutton = new javax.swing.JRadioButton();
        jLabel21 = new javax.swing.JLabel();

        BookPopUpMenu.setBackground(new java.awt.Color(102, 0, 0));
        BookPopUpMenu.setForeground(new java.awt.Color(242, 242, 242));
        BookPopUpMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        AddBook.setBackground(new java.awt.Color(102, 0, 0));
        AddBook.setText("Add a book");
        AddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBookActionPerformed(evt);
            }
        });
        BookPopUpMenu.add(AddBook);

        RemoveBook.setText("Remove a book");
        RemoveBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBookActionPerformed(evt);
            }
        });
        BookPopUpMenu.add(RemoveBook);

        FindBook.setText("Find a book");
        FindBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindBookActionPerformed(evt);
            }
        });
        BookPopUpMenu.add(FindBook);

        UpdateBook.setText("Update a book's info");
        UpdateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBookActionPerformed(evt);
            }
        });
        BookPopUpMenu.add(UpdateBook);

        AddReader.setText("Add a reader");
        AddReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddReaderActionPerformed(evt);
            }
        });
        ReaderPopUpMenu.add(AddReader);

        RemoveReader.setText("Remove a reader");
        RemoveReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveReaderActionPerformed(evt);
            }
        });
        ReaderPopUpMenu.add(RemoveReader);

        FindReader.setText("Find a reader");
        FindReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindReaderActionPerformed(evt);
            }
        });
        ReaderPopUpMenu.add(FindReader);

        UpdateReader.setText("Update a reader's info");
        UpdateReader.setToolTipText("");
        UpdateReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateReaderActionPerformed(evt);
            }
        });
        ReaderPopUpMenu.add(UpdateReader);

        AddTicket.setText("Add a ticket");
        AddTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTicketActionPerformed(evt);
            }
        });
        TicketPopUpMenu.add(AddTicket);

        RemoveTicket.setText("Remove a ticket");
        RemoveTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveTicketActionPerformed(evt);
            }
        });
        TicketPopUpMenu.add(RemoveTicket);

        FindTicket.setText("Find a ticket");
        FindTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindTicketActionPerformed(evt);
            }
        });
        TicketPopUpMenu.add(FindTicket);

        UpdateTicket.setText("Update a ticket");
        UpdateTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateTicketActionPerformed(evt);
            }
        });
        TicketPopUpMenu.add(UpdateTicket);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menu_background.setBackground(new java.awt.Color(102, 0, 0));

        home_icon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        ToLogOut.setBackground(new java.awt.Color(102, 0, 0));
        ToLogOut.setForeground(new java.awt.Color(255, 255, 255));
        ToLogOut.setText("LOG OUT");
        ToLogOut.setBorderPainted(false);
        ToLogOut.setContentAreaFilled(false);
        ToLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToLogOutActionPerformed(evt);
            }
        });

        ToBorrowTicketMenu.setBackground(new java.awt.Color(102, 0, 0));
        ToBorrowTicketMenu.setForeground(new java.awt.Color(255, 255, 255));
        ToBorrowTicketMenu.setText("TICKET");
        ToBorrowTicketMenu.setBorder(null);
        ToBorrowTicketMenu.setContentAreaFilled(false);
        ToBorrowTicketMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToBorrowTicketMenuActionPerformed(evt);
            }
        });

        ToReaderMenu.setBackground(new java.awt.Color(102, 0, 0));
        ToReaderMenu.setForeground(new java.awt.Color(255, 255, 255));
        ToReaderMenu.setText("READERS");
        ToReaderMenu.setBorder(null);
        ToReaderMenu.setContentAreaFilled(false);
        ToReaderMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToReaderMenuActionPerformed(evt);
            }
        });

        ToBookMenu.setBackground(new java.awt.Color(102, 0, 0));
        ToBookMenu.setForeground(new java.awt.Color(255, 255, 255));
        ToBookMenu.setText("BOOKS");
        ToBookMenu.setBorder(null);
        ToBookMenu.setContentAreaFilled(false);
        ToBookMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToBookMenuActionPerformed(evt);
            }
        });

        HomeButton.setBackground(new java.awt.Color(102, 0, 0));
        HomeButton.setForeground(new java.awt.Color(255, 255, 255));
        HomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/menu-icon.png"))); // NOI18N
        HomeButton.setBorder(null);
        HomeButton.setContentAreaFilled(false);
        HomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menu_backgroundLayout = new javax.swing.GroupLayout(menu_background);
        menu_background.setLayout(menu_backgroundLayout);
        menu_backgroundLayout.setHorizontalGroup(
            menu_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_backgroundLayout.createSequentialGroup()
                .addComponent(home_icon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HomeButton)
                .addGap(38, 38, 38))
            .addComponent(ToLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
            .addComponent(ToBorrowTicketMenu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ToReaderMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ToBookMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        menu_backgroundLayout.setVerticalGroup(
            menu_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_backgroundLayout.createSequentialGroup()
                .addGroup(menu_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(home_icon, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(menu_backgroundLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(HomeButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(ToBookMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ToReaderMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ToBorrowTicketMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(ToLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(menu_background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 140, 440));

        design_by.setBackground(new java.awt.Color(204, 0, 102));

        group_6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        group_6.setForeground(new java.awt.Color(242, 242, 242));
        group_6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        group_6.setText("A BOOK A DAY KEEPS THE TEACHER AWAY");

        jLabel3.setForeground(new java.awt.Color(242, 242, 242));
        jLabel3.setText("_____________________");

        jLabel4.setForeground(new java.awt.Color(242, 242, 242));
        jLabel4.setText("____________________________");

        javax.swing.GroupLayout design_byLayout = new javax.swing.GroupLayout(design_by);
        design_by.setLayout(design_byLayout);
        design_byLayout.setHorizontalGroup(
            design_byLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, design_byLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(group_6)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addContainerGap())
        );
        design_byLayout.setVerticalGroup(
            design_byLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(group_6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(design_byLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(design_byLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        MenuMainScreen.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        welcomelabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        welcomelabel.setText("WELCOME TO GROUP 6 LIBRARY");

        menubackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/main menu background.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menubackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menubackground, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout WelcomeLayout = new javax.swing.GroupLayout(Welcome);
        Welcome.setLayout(WelcomeLayout);
        WelcomeLayout.setHorizontalGroup(
            WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(WelcomeLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(welcomelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(249, Short.MAX_VALUE))
        );
        WelcomeLayout.setVerticalGroup(
            WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WelcomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        MenuMainScreen.addTab("main", Welcome);

        Book_Name.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Book_Name.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Book_Name.setText("Name");

        Category.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Category.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Category.setText("Category");

        Publisher.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Publisher.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Publisher.setText("Publisher");

        Author.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Author.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Author.setText("Author");

        AddBookbutton.setBackground(new java.awt.Color(102, 0, 0));
        AddBookbutton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AddBookbutton.setForeground(new java.awt.Color(242, 242, 242));
        AddBookbutton.setText("ADD");
        AddBookbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBookbuttonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ADD BOOK");

        Quantity.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Quantity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Quantity.setText("Quantity");

        ID.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ID.setText("ID");

        javax.swing.GroupLayout AddBooksLayout = new javax.swing.GroupLayout(AddBooks);
        AddBooks.setLayout(AddBooksLayout);
        AddBooksLayout.setHorizontalGroup(
            AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddBooksLayout.createSequentialGroup()
                .addGroup(AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddBooksLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddBooksLayout.createSequentialGroup()
                                .addComponent(Publisher)
                                .addGap(15, 15, 15))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddBooksLayout.createSequentialGroup()
                                .addComponent(ID)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddBooksLayout.createSequentialGroup()
                                .addComponent(Author, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Author_Field, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                            .addComponent(Publisher_Field, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ID_Field))
                        .addGap(128, 128, 128)
                        .addGroup(AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AddBooksLayout.createSequentialGroup()
                                .addGroup(AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Category)
                                    .addComponent(Book_Name))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Bookname_Field, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addComponent(Category_Field)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AddBooksLayout.createSequentialGroup()
                                .addComponent(Quantity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Quantity_Field, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))))
                    .addGroup(AddBooksLayout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AddBooksLayout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(AddBookbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        AddBooksLayout.setVerticalGroup(
            AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddBooksLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ID_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ID)
                    .addComponent(Bookname_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Book_Name))
                .addGap(18, 18, 18)
                .addGroup(AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Publisher_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Publisher)
                    .addComponent(Category)
                    .addComponent(Category_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(AddBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Author)
                    .addComponent(Author_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Quantity_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Quantity))
                .addGap(36, 36, 36)
                .addComponent(AddBookbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
        );

        MenuMainScreen.addTab("add books", AddBooks);

        FindBooks.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setText("FIND BOOKS");
        FindBooks.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(277, 6, -1, -1));

        FindIDBooks.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FindIDBooks.setText("ID");
        FindBooks.add(FindIDBooks, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, -1, -1));

        FindIDBook_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindIDBook_FieldActionPerformed(evt);
            }
        });
        FindIDBook_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FindIDBook_FieldKeyPressed(evt);
            }
        });
        FindBooks.add(FindIDBook_Field, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 44, 150, 31));

        FindCategory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FindCategory.setText("Category");
        FindBooks.add(FindCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 85, -1, -1));

        FindCategory_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FindCategory_FieldKeyPressed(evt);
            }
        });
        FindBooks.add(FindCategory_Field, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 81, 150, 31));

        FindBookName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FindBookName.setText("Name");
        FindBooks.add(FindBookName, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 50, 40, -1));

        FindName_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FindName_FieldKeyPressed(evt);
            }
        });
        FindBooks.add(FindName_Field, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 44, 140, 31));

        FindAuthor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FindAuthor.setText("Author");
        FindBooks.add(FindAuthor, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 85, -1, -1));

        FindAuthor_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindAuthor_FieldActionPerformed(evt);
            }
        });
        FindAuthor_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FindAuthor_FieldKeyPressed(evt);
            }
        });
        FindBooks.add(FindAuthor_Field, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 81, 140, 31));

        FindBookbutton.setBackground(new java.awt.Color(102, 0, 0));
        FindBookbutton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        FindBookbutton.setForeground(new java.awt.Color(242, 242, 242));
        FindBookbutton.setText("Find");
        FindBookbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindBookbuttonActionPerformed(evt);
            }
        });
        FindBooks.add(FindBookbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 120, 100, 40));

        FindTable.setAutoCreateRowSorter(true);
        FindTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        FindTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Category", "Publisher", "Author", "Quantity"
            }
        ));
        FindTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        FindTable.setShowVerticalLines(true);
        FindScrollpane.setViewportView(FindTable);

        javax.swing.GroupLayout FindTablepanelLayout = new javax.swing.GroupLayout(FindTablepanel);
        FindTablepanel.setLayout(FindTablepanelLayout);
        FindTablepanelLayout.setHorizontalGroup(
            FindTablepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FindScrollpane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        FindTablepanelLayout.setVerticalGroup(
            FindTablepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindTablepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FindScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        FindBooks.add(FindTablepanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 750, 200));

        MenuMainScreen.addTab("find books", FindBooks);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setText("ADD READER");

        Username_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Username_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Username_FieldActionPerformed(evt);
            }
        });
        Username_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Username_FieldKeyPressed(evt);
            }
        });

        Username.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Username.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Username.setText("Name");

        Gender.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Gender.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Gender.setText("Gender");

        Gender_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Gender_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Gender_FieldKeyPressed(evt);
            }
        });

        Contact_number.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Contact_number.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Contact_number.setText("Contact Number");

        Contactnumber_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Contactnumber_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Contactnumber_FieldKeyPressed(evt);
            }
        });

        AddUserbutton.setBackground(new java.awt.Color(102, 0, 0));
        AddUserbutton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AddUserbutton.setForeground(new java.awt.Color(242, 242, 242));
        AddUserbutton.setText("ADD");
        AddUserbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddUserbuttonActionPerformed(evt);
            }
        });

        CCCD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CCCD.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CCCD.setText("CCCD");

        CCCD_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CCCD_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CCCD_FieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout AddReadersLayout = new javax.swing.GroupLayout(AddReaders);
        AddReaders.setLayout(AddReadersLayout);
        AddReadersLayout.setHorizontalGroup(
            AddReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddReadersLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(AddReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Gender)
                    .addComponent(Username))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Gender_Field, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                    .addComponent(Username_Field))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(AddReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AddReadersLayout.createSequentialGroup()
                        .addComponent(Contact_number)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Contactnumber_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AddReadersLayout.createSequentialGroup()
                        .addComponent(CCCD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CCCD_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(114, 114, 114))
            .addGroup(AddReadersLayout.createSequentialGroup()
                .addGroup(AddReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddReadersLayout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(jLabel8))
                    .addGroup(AddReadersLayout.createSequentialGroup()
                        .addGap(293, 293, 293)
                        .addComponent(AddUserbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AddReadersLayout.setVerticalGroup(
            AddReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddReadersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(40, 40, 40)
                .addGroup(AddReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CCCD)
                    .addComponent(CCCD_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Username_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Username))
                .addGap(56, 56, 56)
                .addGroup(AddReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Gender_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Gender)
                    .addComponent(Contact_number)
                    .addComponent(Contactnumber_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(AddUserbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(164, Short.MAX_VALUE))
        );

        MenuMainScreen.addTab("add users", AddReaders);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel12.setText("FIND READER");

        FindUserCCCD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        FindUserCCCD.setText("CCCD");

        FindUserCCCD_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FindUserCCCD_FieldKeyPressed(evt);
            }
        });

        FindGender.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        FindGender.setText("Gender");

        FindUserGender_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FindUserGender_FieldKeyPressed(evt);
            }
        });

        FindUserName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        FindUserName.setText("Name");

        FindUserName_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FindUserName_FieldKeyPressed(evt);
            }
        });

        FindUserbutton.setBackground(new java.awt.Color(102, 0, 0));
        FindUserbutton.setForeground(new java.awt.Color(242, 242, 242));
        FindUserbutton.setText("Find");
        FindUserbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindUserbuttonActionPerformed(evt);
            }
        });

        FindUserTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        FindUserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "CCCD", "Name", "Gender", "Contact Number"
            }
        ));
        FindUserTable.setShowVerticalLines(true);
        FindUserScrollPane.setViewportView(FindUserTable);

        javax.swing.GroupLayout FindUserTablepaneLayout = new javax.swing.GroupLayout(FindUserTablepane);
        FindUserTablepane.setLayout(FindUserTablepaneLayout);
        FindUserTablepaneLayout.setHorizontalGroup(
            FindUserTablepaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FindUserTablepaneLayout.createSequentialGroup()
                .addComponent(FindUserScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
                .addContainerGap())
        );
        FindUserTablepaneLayout.setVerticalGroup(
            FindUserTablepaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindUserTablepaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FindUserScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel15.setText("CNumber");

        FindUserContact_number_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FindUserContact_number_FieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout FindReadersLayout = new javax.swing.GroupLayout(FindReaders);
        FindReaders.setLayout(FindReadersLayout);
        FindReadersLayout.setHorizontalGroup(
            FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FindReadersLayout.createSequentialGroup()
                .addComponent(FindUserTablepane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(FindReadersLayout.createSequentialGroup()
                .addGap(282, 282, 282)
                .addGroup(FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(FindUserbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(FindReadersLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(FindUserCCCD)
                    .addComponent(FindGender))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FindUserGender_Field, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                    .addComponent(FindUserCCCD_Field))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FindUserName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FindUserName_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FindUserContact_number_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(104, 104, 104))
        );
        FindReadersLayout.setVerticalGroup(
            FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindReadersLayout.createSequentialGroup()
                .addComponent(jLabel12)
                .addGap(37, 37, 37)
                .addGroup(FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(FindReadersLayout.createSequentialGroup()
                        .addGroup(FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(FindUserCCCD)
                            .addComponent(FindUserCCCD_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FindGender)
                            .addComponent(FindUserGender_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(FindReadersLayout.createSequentialGroup()
                        .addGroup(FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FindUserName_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FindUserName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(FindReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FindUserContact_number_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FindUserbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FindUserTablepane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MenuMainScreen.addTab("find users", FindReaders);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel11.setText("UPDATE READER'S INFO");

        CCCDReaderUpdate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CCCDReaderUpdate.setText("CCCD");

        CCCDReaderUpdate_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CCCDReaderUpdate_FieldKeyPressed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Choose the attribute you want to update:");

        UpdateUserpanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ChooseUpdateUserbuttongroup.add(ContactNumberUpdateRadiobutton);
        ContactNumberUpdateRadiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ContactNumberUpdateRadiobutton.setText("Contact number");
        ContactNumberUpdateRadiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContactNumberUpdateRadiobuttonActionPerformed(evt);
            }
        });

        ChooseUpdateUserbuttongroup.add(GenderUpdateRadiobutton);
        GenderUpdateRadiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        GenderUpdateRadiobutton.setText("Gender");
        GenderUpdateRadiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenderUpdateRadiobuttonActionPerformed(evt);
            }
        });

        ChooseUpdateUserbuttongroup.add(NameUpdateRadiobutton);
        NameUpdateRadiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        NameUpdateRadiobutton.setText("Name");
        NameUpdateRadiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameUpdateRadiobuttonActionPerformed(evt);
            }
        });

        UpdateUserInfo_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateUserInfo_FieldActionPerformed(evt);
            }
        });

        UpdateUserInfobutton.setBackground(new java.awt.Color(102, 0, 0));
        UpdateUserInfobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        UpdateUserInfobutton.setForeground(new java.awt.Color(242, 242, 242));
        UpdateUserInfobutton.setText("Update");
        UpdateUserInfobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateUserInfobuttonActionPerformed(evt);
            }
        });
        UpdateUserInfobutton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UpdateUserInfobuttonKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout UpdateUserpanelLayout = new javax.swing.GroupLayout(UpdateUserpanel);
        UpdateUserpanel.setLayout(UpdateUserpanelLayout);
        UpdateUserpanelLayout.setHorizontalGroup(
            UpdateUserpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateUserpanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(UpdateUserpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateUserpanelLayout.createSequentialGroup()
                        .addComponent(NameUpdateRadiobutton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(UpdateUserpanelLayout.createSequentialGroup()
                        .addComponent(GenderUpdateRadiobutton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdateUserInfobutton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(185, 185, 185))
                    .addGroup(UpdateUserpanelLayout.createSequentialGroup()
                        .addComponent(ContactNumberUpdateRadiobutton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdateUserInfo_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149))))
        );
        UpdateUserpanelLayout.setVerticalGroup(
            UpdateUserpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdateUserpanelLayout.createSequentialGroup()
                .addGroup(UpdateUserpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(UpdateUserpanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdateUserInfo_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(UpdateUserInfobutton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UpdateUserpanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(NameUpdateRadiobutton)
                        .addGap(41, 41, 41)
                        .addComponent(ContactNumberUpdateRadiobutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(GenderUpdateRadiobutton)))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout UpdateReadersLayout = new javax.swing.GroupLayout(UpdateReaders);
        UpdateReaders.setLayout(UpdateReadersLayout);
        UpdateReadersLayout.setHorizontalGroup(
            UpdateReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(UpdateUserpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(UpdateReadersLayout.createSequentialGroup()
                .addGroup(UpdateReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateReadersLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5))
                    .addGroup(UpdateReadersLayout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addGroup(UpdateReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(UpdateReadersLayout.createSequentialGroup()
                                .addComponent(CCCDReaderUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CCCDReaderUpdate_Field))
                            .addComponent(jLabel11))))
                .addGap(0, 249, Short.MAX_VALUE))
        );
        UpdateReadersLayout.setVerticalGroup(
            UpdateReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateReadersLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addGroup(UpdateReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CCCDReaderUpdate)
                    .addComponent(CCCDReaderUpdate_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(19, 19, 19)
                .addComponent(UpdateUserpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        MenuMainScreen.addTab("update users", UpdateReaders);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Choose the attribute you want to update:");

        IDBookUpdate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        IDBookUpdate.setText("ID");

        IDBookUpdate_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        IDBookUpdate_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDBookUpdate_FieldActionPerformed(evt);
            }
        });
        IDBookUpdate_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IDBookUpdate_FieldKeyPressed(evt);
            }
        });

        UpdateBookpanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ChooseUpdateBookbuttongroup.add(CategoryUpdateRadiobutton);
        CategoryUpdateRadiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CategoryUpdateRadiobutton.setText("Category");
        CategoryUpdateRadiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryUpdateRadiobuttonActionPerformed(evt);
            }
        });

        ChooseUpdateBookbuttongroup.add(QuantityUpdateRadiobutton);
        QuantityUpdateRadiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        QuantityUpdateRadiobutton.setText("Quantity");
        QuantityUpdateRadiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityUpdateRadiobuttonActionPerformed(evt);
            }
        });

        ChooseUpdateBookbuttongroup.add(NameBookUpdateRadiobutton);
        NameBookUpdateRadiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        NameBookUpdateRadiobutton.setText("Name");
        NameBookUpdateRadiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameBookUpdateRadiobuttonActionPerformed(evt);
            }
        });

        UpdateBookInfo_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        UpdateBookInfo_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UpdateBookInfo_FieldKeyPressed(evt);
            }
        });

        UpdateBookInfobutton.setBackground(new java.awt.Color(102, 0, 0));
        UpdateBookInfobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        UpdateBookInfobutton.setForeground(new java.awt.Color(242, 242, 242));
        UpdateBookInfobutton.setText("Update");
        UpdateBookInfobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBookInfobuttonActionPerformed(evt);
            }
        });

        ChooseUpdateBookbuttongroup.add(PublisherUpdateRadiobutton);
        PublisherUpdateRadiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        PublisherUpdateRadiobutton.setText("Publisher");
        PublisherUpdateRadiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PublisherUpdateRadiobuttonActionPerformed(evt);
            }
        });

        ChooseUpdateBookbuttongroup.add(AuthorUpdateRadiobutton);
        AuthorUpdateRadiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AuthorUpdateRadiobutton.setText("Author");
        AuthorUpdateRadiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorUpdateRadiobuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UpdateBookpanelLayout = new javax.swing.GroupLayout(UpdateBookpanel);
        UpdateBookpanel.setLayout(UpdateBookpanelLayout);
        UpdateBookpanelLayout.setHorizontalGroup(
            UpdateBookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateBookpanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(UpdateBookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(QuantityUpdateRadiobutton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CategoryUpdateRadiobutton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(UpdateBookpanelLayout.createSequentialGroup()
                        .addComponent(NameBookUpdateRadiobutton)
                        .addGap(107, 107, 107)
                        .addGroup(UpdateBookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AuthorUpdateRadiobutton)
                            .addComponent(PublisherUpdateRadiobutton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                .addGroup(UpdateBookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdateBookpanelLayout.createSequentialGroup()
                        .addComponent(UpdateBookInfo_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(111, 111, 111))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdateBookpanelLayout.createSequentialGroup()
                        .addComponent(UpdateBookInfobutton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146))))
        );
        UpdateBookpanelLayout.setVerticalGroup(
            UpdateBookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdateBookpanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(UpdateBookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameBookUpdateRadiobutton)
                    .addComponent(PublisherUpdateRadiobutton))
                .addGroup(UpdateBookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateBookpanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdateBookInfo_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addGroup(UpdateBookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UpdateBookInfobutton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(QuantityUpdateRadiobutton))
                        .addGap(22, 22, 22))
                    .addGroup(UpdateBookpanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(UpdateBookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CategoryUpdateRadiobutton)
                            .addComponent(AuthorUpdateRadiobutton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel13.setText("UPDATE BOOK'S INFO");

        javax.swing.GroupLayout UpdateBooksLayout = new javax.swing.GroupLayout(UpdateBooks);
        UpdateBooks.setLayout(UpdateBooksLayout);
        UpdateBooksLayout.setHorizontalGroup(
            UpdateBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateBooksLayout.createSequentialGroup()
                .addGroup(UpdateBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UpdateBookpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(UpdateBooksLayout.createSequentialGroup()
                        .addGroup(UpdateBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UpdateBooksLayout.createSequentialGroup()
                                .addGap(242, 242, 242)
                                .addGroup(UpdateBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(UpdateBooksLayout.createSequentialGroup()
                                        .addComponent(IDBookUpdate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(IDBookUpdate_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel13)))
                            .addGroup(UpdateBooksLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel10)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        UpdateBooksLayout.setVerticalGroup(
            UpdateBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdateBooksLayout.createSequentialGroup()
                .addComponent(jLabel13)
                .addGap(13, 13, 13)
                .addGroup(UpdateBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDBookUpdate_Field, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(IDBookUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(UpdateBookpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        MenuMainScreen.addTab("update books", UpdateBooks);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setText("REMOVE READERS");

        CCCDUser.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CCCDUser.setText("CCCD");

        UserRemove_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        UserRemove_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UserRemove_FieldKeyPressed(evt);
            }
        });

        RemoveUserbutton.setBackground(new java.awt.Color(102, 0, 0));
        RemoveUserbutton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        RemoveUserbutton.setForeground(new java.awt.Color(242, 242, 242));
        RemoveUserbutton.setText("Remove");
        RemoveUserbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveUserbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RemoveReadersLayout = new javax.swing.GroupLayout(RemoveReaders);
        RemoveReaders.setLayout(RemoveReadersLayout);
        RemoveReadersLayout.setHorizontalGroup(
            RemoveReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RemoveReadersLayout.createSequentialGroup()
                .addGroup(RemoveReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RemoveReadersLayout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(CCCDUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UserRemove_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(RemoveUserbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RemoveReadersLayout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(jLabel9)))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        RemoveReadersLayout.setVerticalGroup(
            RemoveReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RemoveReadersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(44, 44, 44)
                .addGroup(RemoveReadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserRemove_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CCCDUser)
                    .addComponent(RemoveUserbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(313, Short.MAX_VALUE))
        );

        MenuMainScreen.addTab("remove users", RemoveReaders);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setText("REMOVE BOOK");

        ID_BOOK.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ID_BOOK.setText("ID");

        removeID_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        removeID_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                removeID_FieldKeyPressed(evt);
            }
        });

        RemoveBookbutton.setBackground(new java.awt.Color(102, 0, 0));
        RemoveBookbutton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        RemoveBookbutton.setForeground(new java.awt.Color(242, 242, 242));
        RemoveBookbutton.setText("Remove");
        RemoveBookbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBookbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RemoveBooksLayout = new javax.swing.GroupLayout(RemoveBooks);
        RemoveBooks.setLayout(RemoveBooksLayout);
        RemoveBooksLayout.setHorizontalGroup(
            RemoveBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RemoveBooksLayout.createSequentialGroup()
                .addGroup(RemoveBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RemoveBooksLayout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(ID_BOOK)
                        .addGap(18, 18, 18)
                        .addComponent(removeID_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addComponent(RemoveBookbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RemoveBooksLayout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(jLabel6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        RemoveBooksLayout.setVerticalGroup(
            RemoveBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RemoveBooksLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addGap(28, 28, 28)
                .addGroup(RemoveBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeID_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ID_BOOK)
                    .addComponent(RemoveBookbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(321, Short.MAX_VALUE))
        );

        MenuMainScreen.addTab("remove books", RemoveBooks);

        AddReturn_date.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AddReturn_date.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AddReturn_date.setText("Return_date");

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("ADD TICKET");

        AddTicketID_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTicketID_FieldActionPerformed(evt);
            }
        });
        AddTicketID_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AddTicketID_FieldKeyPressed(evt);
            }
        });

        TicketID.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        TicketID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        TicketID.setText("TicketID");

        ADDTicketCCCD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ADDTicketCCCD.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ADDTicketCCCD.setText("CCCD");

        AddTicketCCCD_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AddTicketCCCD_FieldKeyPressed(evt);
            }
        });

        AddReturn_Date_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AddReturn_Date_FieldKeyPressed(evt);
            }
        });

        AddBorrow_Date.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AddBorrow_Date.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AddBorrow_Date.setText("Borrow_date");

        AddBorrow_Date_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBorrow_Date_FieldActionPerformed(evt);
            }
        });
        AddBorrow_Date_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AddBorrow_Date_FieldKeyPressed(evt);
            }
        });

        AddBook_ID_Ticket_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AddBook_ID_Ticket_FieldKeyPressed(evt);
            }
        });

        AddBook_ID.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AddBook_ID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AddBook_ID.setText("BOOK_ID");

        AddTicketbutton.setBackground(new java.awt.Color(102, 0, 0));
        AddTicketbutton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AddTicketbutton.setForeground(new java.awt.Color(242, 242, 242));
        AddTicketbutton.setText("ADD");
        AddTicketbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTicketbuttonActionPerformed(evt);
            }
        });

        AddNoteTicket_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AddNoteTicket_FieldKeyPressed(evt);
            }
        });

        AddNoteTicket.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AddNoteTicket.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AddNoteTicket.setText("Note");

        javax.swing.GroupLayout AddTicketsLayout = new javax.swing.GroupLayout(AddTickets);
        AddTickets.setLayout(AddTicketsLayout);
        AddTicketsLayout.setHorizontalGroup(
            AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddTicketsLayout.createSequentialGroup()
                .addGroup(AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddTicketsLayout.createSequentialGroup()
                        .addGap(287, 287, 287)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AddTicketsLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TicketID)
                            .addComponent(ADDTicketCCCD)
                            .addComponent(AddReturn_date))
                        .addGap(18, 18, 18)
                        .addGroup(AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(AddReturn_Date_Field, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddTicketCCCD_Field, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddTicketID_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(79, 79, 79)
                        .addGroup(AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddTicketsLayout.createSequentialGroup()
                                .addGroup(AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AddBook_ID, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(AddBorrow_Date, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(180, 180, 180))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddTicketsLayout.createSequentialGroup()
                                .addComponent(AddNoteTicket)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AddBorrow_Date_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AddBook_ID_Ticket_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AddNoteTicket_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(AddTicketsLayout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addComponent(AddTicketbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        AddTicketsLayout.setVerticalGroup(
            AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddTicketsLayout.createSequentialGroup()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddTicketID_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TicketID)
                    .addComponent(AddBook_ID_Ticket_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddBook_ID))
                .addGap(18, 18, 18)
                .addGroup(AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddTicketCCCD_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ADDTicketCCCD)
                    .addComponent(AddBorrow_Date_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddBorrow_Date))
                .addGap(18, 18, 18)
                .addGroup(AddTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddReturn_Date_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddReturn_date)
                    .addComponent(AddNoteTicket_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddNoteTicket))
                .addGap(36, 36, 36)
                .addComponent(AddTicketbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        MenuMainScreen.addTab("tab11", AddTickets);

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel19.setText("REMOVE TICKET");

        ID_BOOK1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ID_BOOK1.setText("TicketID");

        removeID_Field1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        removeID_Field1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                removeID_Field1KeyPressed(evt);
            }
        });

        RemoveBookbutton1.setBackground(new java.awt.Color(102, 0, 0));
        RemoveBookbutton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        RemoveBookbutton1.setForeground(new java.awt.Color(242, 242, 242));
        RemoveBookbutton1.setText("Remove");
        RemoveBookbutton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBookbutton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RemoveTicketsLayout = new javax.swing.GroupLayout(RemoveTickets);
        RemoveTickets.setLayout(RemoveTicketsLayout);
        RemoveTicketsLayout.setHorizontalGroup(
            RemoveTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RemoveTicketsLayout.createSequentialGroup()
                .addGroup(RemoveTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RemoveTicketsLayout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(jLabel19))
                    .addGroup(RemoveTicketsLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(ID_BOOK1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeID_Field1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(RemoveBookbutton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(157, Short.MAX_VALUE))
        );
        RemoveTicketsLayout.setVerticalGroup(
            RemoveTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RemoveTicketsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addGroup(RemoveTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeID_Field1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ID_BOOK1)
                    .addComponent(RemoveBookbutton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(340, Short.MAX_VALUE))
        );

        MenuMainScreen.addTab("tab12", RemoveTickets);

        FindTickets.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel14.setText("FIND A TICKET");
        FindTickets.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 0, -1, -1));

        CCCDTicket.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CCCDTicket.setText("CCCD");
        FindTickets.add(CCCDTicket, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        BookIDTicket_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BookIDTicket_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BookIDTicket_FieldKeyPressed(evt);
            }
        });
        FindTickets.add(BookIDTicket_Field, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 40, 160, 32));

        BookIDTicket.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BookIDTicket.setText("Book_ID");
        FindTickets.add(BookIDTicket, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 40, -1, -1));

        CCCDTicket_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CCCDTicket_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CCCDTicket_FieldKeyPressed(evt);
            }
        });
        FindTickets.add(CCCDTicket_Field, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 150, 32));

        TicketBorrowTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Ticket_ID", "CCCD", "Book_ID", "Borrow_date", "Return_date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TicketBorrowTable.setShowVerticalLines(true);
        TicketBorrowScrollPane.setViewportView(TicketBorrowTable);

        javax.swing.GroupLayout TicketBorrowPanelLayout = new javax.swing.GroupLayout(TicketBorrowPanel);
        TicketBorrowPanel.setLayout(TicketBorrowPanelLayout);
        TicketBorrowPanelLayout.setHorizontalGroup(
            TicketBorrowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TicketBorrowPanelLayout.createSequentialGroup()
                .addComponent(TicketBorrowScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
                .addContainerGap())
        );
        TicketBorrowPanelLayout.setVerticalGroup(
            TicketBorrowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TicketBorrowPanelLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(TicketBorrowScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        FindTickets.add(TicketBorrowPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, -1, 180));

        ReturnTicketButton.setBackground(new java.awt.Color(102, 0, 0));
        ReturnTicketButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ReturnTicketButton.setForeground(new java.awt.Color(242, 242, 242));
        ReturnTicketButton.setText("Find");
        ReturnTicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnTicketButtonActionPerformed(evt);
            }
        });
        FindTickets.add(ReturnTicketButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 140, 200, 31));

        TicketID_Field.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        TicketID_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TicketID_FieldKeyPressed(evt);
            }
        });
        FindTickets.add(TicketID_Field, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 150, 30));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel16.setText("TicketID");
        FindTickets.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel17.setText("Status");
        FindTickets.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 90, -1, -1));

        StatusComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        StatusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<none>", "Not Returned", "Overdue", "Due Today", "Returned" }));
        FindTickets.add(StatusComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 90, 160, 30));

        MenuMainScreen.addTab("add borrow", FindTickets);

        jLabel20.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel20.setText("Choose the attribute you want to update:");

        TicketIDUpdate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        TicketIDUpdate.setText("TicketID");

        TicketIDUpdate_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TicketIDUpdate_FieldKeyPressed(evt);
            }
        });

        UpdateTicketpanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        UpdateTicketpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ChooseUpdateTicketbuttongroup.add(BookIDUpdateradiobutton);
        BookIDUpdateradiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BookIDUpdateradiobutton.setText("Book_ID");
        BookIDUpdateradiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookIDUpdateradiobuttonActionPerformed(evt);
            }
        });
        UpdateTicketpanel.add(BookIDUpdateradiobutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 90, 137, -1));

        ChooseUpdateTicketbuttongroup.add(Borrow_dateUpdateradiobutton);
        Borrow_dateUpdateradiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Borrow_dateUpdateradiobutton.setText("Borrow_date(dd/MM/yyyy)");
        Borrow_dateUpdateradiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Borrow_dateUpdateradiobuttonActionPerformed(evt);
            }
        });
        UpdateTicketpanel.add(Borrow_dateUpdateradiobutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 159, -1, -1));

        ChooseUpdateTicketbuttongroup.add(CCCDUpdateradiobutton);
        CCCDUpdateradiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CCCDUpdateradiobutton.setText("CCCD");
        CCCDUpdateradiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CCCDUpdateradiobuttonActionPerformed(evt);
            }
        });
        UpdateTicketpanel.add(CCCDUpdateradiobutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 24, -1, -1));

        UpdateTicketInfo_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateTicketInfo_FieldActionPerformed(evt);
            }
        });
        UpdateTicketpanel.add(UpdateTicketInfo_Field, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 40, 181, 36));

        UpdateUserInfobutton1.setBackground(new java.awt.Color(102, 0, 0));
        UpdateUserInfobutton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        UpdateUserInfobutton1.setForeground(new java.awt.Color(242, 242, 242));
        UpdateUserInfobutton1.setText("Update");
        UpdateUserInfobutton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateUserInfobutton1ActionPerformed(evt);
            }
        });
        UpdateUserInfobutton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UpdateUserInfobutton1KeyPressed(evt);
            }
        });
        UpdateTicketpanel.add(UpdateUserInfobutton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 140, 114, 41));

        ChooseUpdateTicketbuttongroup.add(Return_dateUpdateradiobutton);
        Return_dateUpdateradiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Return_dateUpdateradiobutton.setText("Return_date(dd/MM/yyyy)");
        Return_dateUpdateradiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Return_dateUpdateradiobuttonActionPerformed(evt);
            }
        });
        UpdateTicketpanel.add(Return_dateUpdateradiobutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, -1, -1));

        ChooseUpdateTicketbuttongroup.add(StatusUpdateradiobutton);
        StatusUpdateradiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        StatusUpdateradiobutton.setText("Status");
        StatusUpdateradiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusUpdateradiobuttonActionPerformed(evt);
            }
        });
        UpdateTicketpanel.add(StatusUpdateradiobutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 90, 137, -1));

        StatusComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        StatusComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Returned", "Overdue", "Due Today", "Returned" }));
        StatusComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusComboBox1ActionPerformed(evt);
            }
        });
        UpdateTicketpanel.add(StatusComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 40, 160, 30));

        ChooseUpdateTicketbuttongroup.add(NoteUpdateRadiobutton);
        NoteUpdateRadiobutton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        NoteUpdateRadiobutton.setText("Note");
        NoteUpdateRadiobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoteUpdateRadiobuttonActionPerformed(evt);
            }
        });
        UpdateTicketpanel.add(NoteUpdateRadiobutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 160, -1, -1));

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel21.setText("UPDATE TICKET");

        javax.swing.GroupLayout UpdateTicketsLayout = new javax.swing.GroupLayout(UpdateTickets);
        UpdateTickets.setLayout(UpdateTicketsLayout);
        UpdateTicketsLayout.setHorizontalGroup(
            UpdateTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(UpdateTicketpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(UpdateTicketsLayout.createSequentialGroup()
                .addGroup(UpdateTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateTicketsLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel20))
                    .addGroup(UpdateTicketsLayout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(TicketIDUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(TicketIDUpdate_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 282, Short.MAX_VALUE))
            .addGroup(UpdateTicketsLayout.createSequentialGroup()
                .addGap(279, 279, 279)
                .addComponent(jLabel21)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UpdateTicketsLayout.setVerticalGroup(
            UpdateTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateTicketsLayout.createSequentialGroup()
                .addComponent(jLabel21)
                .addGap(18, 18, 18)
                .addGroup(UpdateTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TicketIDUpdate_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TicketIDUpdate))
                .addGap(18, 18, 18)
                .addComponent(jLabel20)
                .addGap(19, 19, 19)
                .addComponent(UpdateTicketpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        MenuMainScreen.addTab("tab13", UpdateTickets);

        javax.swing.GroupLayout content_menubackgroundLayout = new javax.swing.GroupLayout(content_menubackground);
        content_menubackground.setLayout(content_menubackgroundLayout);
        content_menubackgroundLayout.setHorizontalGroup(
            content_menubackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(content_menubackgroundLayout.createSequentialGroup()
                .addComponent(MenuMainScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(design_by, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        content_menubackgroundLayout.setVerticalGroup(
            content_menubackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(content_menubackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(design_by, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MenuMainScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(content_menubackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, 750, 440));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Side bar
    private void ToReaderMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToReaderMenuActionPerformed
        ReaderPopUpMenu.show(ToReaderMenu, WIDTH + 139, WIDTH);
    }//GEN-LAST:event_ToReaderMenuActionPerformed

    private void ToLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToLogOutActionPerformed
        dispose();
        new login().setVisible(true);
    }//GEN-LAST:event_ToLogOutActionPerformed

    private void ToBookMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToBookMenuActionPerformed
        BookPopUpMenu.show(ToBookMenu, WIDTH + 139, WIDTH);
    }//GEN-LAST:event_ToBookMenuActionPerformed

    private void ToBorrowTicketMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToBorrowTicketMenuActionPerformed
        TicketPopUpMenu.show(ToBorrowTicketMenu, WIDTH + 139, WIDTH);
    }//GEN-LAST:event_ToBorrowTicketMenuActionPerformed

    
    // pop up menu options action    
    private void AddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBookActionPerformed
        MenuMainScreen.setSelectedComponent(AddBooks);
    }//GEN-LAST:event_AddBookActionPerformed

    private void RemoveBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBookActionPerformed
        MenuMainScreen.setSelectedComponent(RemoveBooks);
    }//GEN-LAST:event_RemoveBookActionPerformed

    private void FindBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindBookActionPerformed
        MenuMainScreen.setSelectedComponent(FindBooks);
        DefaultTableModel bookTable = new DefaultTableModel(
        new Object[]{"ID", "Name", "Category", "Publisher", "Author", "Quantity"}, 0
    );
        Collections.sort(Books.storage());
        for (Books b : Books.storage()) {
        bookTable.addRow(new Object[]{
            b.getID(),
            b.getName(),
            b.getCategory(),
            b.getPublisher(),
            b.getAuthor(),
            b.getQuantity()
        });
    }
    FindTable.setModel(bookTable);      
    }//GEN-LAST:event_FindBookActionPerformed

    private void UpdateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBookActionPerformed
        MenuMainScreen.setSelectedComponent(UpdateBooks);
    }//GEN-LAST:event_UpdateBookActionPerformed

    private void AddReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddReaderActionPerformed
        MenuMainScreen.setSelectedComponent(AddReaders);
    }//GEN-LAST:event_AddReaderActionPerformed

    private void RemoveReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveReaderActionPerformed
        MenuMainScreen.setSelectedComponent(RemoveReaders);
    }//GEN-LAST:event_RemoveReaderActionPerformed

    private void FindReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindReaderActionPerformed
        MenuMainScreen.setSelectedComponent(FindReaders);
        DefaultTableModel readersTable = new DefaultTableModel(
        new Object[]{"CCCD", "Name", "Gender", "Contact Number"}, 0
    );
        Collections.sort(Reader.ReadersList());
        for (Reader r : Reader.ReadersList()) {
        readersTable.addRow(new Object[]{
            r.getCccd(),
            r.getName(),
            r.getGender(),
            r.getContact_number(),
        });
    }
        FindUserTable.setModel(readersTable);
    }//GEN-LAST:event_FindReaderActionPerformed

    private void UpdateReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateReaderActionPerformed
        MenuMainScreen.setSelectedComponent(UpdateReaders);
    }//GEN-LAST:event_UpdateReaderActionPerformed

    private void HomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButtonActionPerformed
        MenuMainScreen.setSelectedComponent(Welcome);
    }//GEN-LAST:event_HomeButtonActionPerformed

    private void AddUserbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddUserbuttonActionPerformed
        if (Username_Field.getText().isEmpty() || Gender_Field.getText().isEmpty() || CCCD_Field.getText().isEmpty() || Contactnumber_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            Username.requestFocus();
        }else{
            int ok = 0;
            String cccd = CCCD_Field.getText();
            String name = Username_Field.getText();
            String gender = Gender_Field.getText();
            String contact_number = Contactnumber_Field.getText();
            
            for (Reader r : Reader.ReadersList()){
                if (r.getCccd().equals(cccd)){
                    JOptionPane.showMessageDialog(null, "There's already an user with the same CCCD. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    CCCD_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Reader newReader = new Reader(cccd, name, gender, contact_number);
                Admin.ADDREADERS(newReader);
                JOptionPane.showMessageDialog(null, "Reader added to the library's database!","AddReader", JOptionPane.INFORMATION_MESSAGE);
                CCCD_Field.setText("");
                Username_Field.setText("");
                Gender_Field.setText("");
                Contactnumber_Field.setText("");
            }
        }
    }//GEN-LAST:event_AddUserbuttonActionPerformed

    private void RemoveBookbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBookbuttonActionPerformed
        try{
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove this book from the database?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (confirm == JOptionPane.YES_OPTION){
                if (Admin.REMOVEBOOKS(removeID_Field.getText()) == true){
                    JOptionPane.showMessageDialog(null, "Book removed successfully!","Book removed", JOptionPane.INFORMATION_MESSAGE);
                }
                else 
                {
                    JOptionPane.showMessageDialog(null, "Book does not exist!","Error", JOptionPane.ERROR_MESSAGE);
                    removeID_Field.requestFocus();
                }
                removeID_Field.setText("");
            }
            else{
                removeID_Field.requestFocus();
            }
        }catch (IOException e){
            
        }
    }//GEN-LAST:event_RemoveBookbuttonActionPerformed

    private void RemoveUserbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveUserbuttonActionPerformed
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove this reader from the database?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION){
            if (Admin.REMOVEREADERS(UserRemove_Field.getText()) == true){
                JOptionPane.showMessageDialog(null, "Reader removed successfully!","Book removed", JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Reader does not exist!","Error", JOptionPane.ERROR_MESSAGE);
                UserRemove_Field.requestFocus();
            }
            UserRemove_Field.setText("");
        }
        else{
            UserRemove_Field.requestFocus();
        }
    }//GEN-LAST:event_RemoveUserbuttonActionPerformed

    private void AddBookbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBookbuttonActionPerformed
        try {
            if (ID_Field.getText().isEmpty() || Bookname_Field.getText().isEmpty() || Category_Field.getText().isEmpty() || Publisher_Field.getText().isEmpty() || Author_Field.getText().isEmpty() || Quantity_Field.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
                ID_Field.requestFocus();
            }else{
                int ok = 0;
                String id = ID_Field.getText();
                String name = Bookname_Field.getText();
                String category = Category_Field.getText();
                String publisher = Publisher_Field.getText();
                String author = Author_Field.getText();
                String quantity = Quantity_Field.getText();
                for (Books b : Books.storage()){
                    if (b.getID().equals(id)){
                        JOptionPane.showMessageDialog(null, "There's already a book with the same ID. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                        ID_Field.requestFocus();
                        ok++;
                        break;
                    }
                }
                if (ok == 0){
                    Books newBook = new Books(id,name, category, publisher, author, quantity);
                    Admin.ADDBOOKS(newBook);
                    JOptionPane.showMessageDialog(null, "Book added to the library's database!","AddBook", JOptionPane.INFORMATION_MESSAGE);
                    ID_Field.setText("");
                    Bookname_Field.setText(""); 
                    Category_Field.setText(""); 
                    Publisher_Field.setText(""); 
                    Author_Field.setText(""); 
                    Quantity_Field.setText("");
                }
            }
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_AddBookbuttonActionPerformed

    private void FindAuthor_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindAuthor_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FindAuthor_FieldActionPerformed

    private void FindBookbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindBookbuttonActionPerformed
        String id = FindIDBook_Field.getText();
        String category = FindCategory_Field.getText();
        String name = FindName_Field.getText();
        String author = FindAuthor_Field.getText();
        
        id = id.isEmpty() ? null : id;
        category = category.isEmpty() ? null : category;
        name = name.isEmpty() ? null : name;
        author = author.isEmpty() ? null : author;
        // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
        ArrayList<Books> filteredBooks = Admin.FINDBOOKS(id, name, category, author);
        DefaultTableModel model = (DefaultTableModel) FindTable.getModel();
        model.setRowCount(0);
        for (Books book : filteredBooks) {
        model.addRow(new Object[]{
            book.getID(),
            book.getName(),
            book.getCategory(),
            book.getPublisher(),
            book.getAuthor(),
            book.getQuantity()
        });
    }
    }//GEN-LAST:event_FindBookbuttonActionPerformed

    private void ContactNumberUpdateRadiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContactNumberUpdateRadiobuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ContactNumberUpdateRadiobuttonActionPerformed

    private void CategoryUpdateRadiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryUpdateRadiobuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CategoryUpdateRadiobuttonActionPerformed

    private void UpdateBookInfobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBookInfobuttonActionPerformed
    
    try{
        String id = IDBookUpdate_Field.getText();
        String updated_info = UpdateBookInfo_Field.getText();
        String query = null;
        if (id.isEmpty() || updated_info.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in both the Book ID and the new information.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //chọn thuộc tính update
        if (NameBookUpdateRadiobutton.isSelected()) {
            query = "name";
        } else if (CategoryUpdateRadiobutton.isSelected()) {
            query = "category";
        } else if (QuantityUpdateRadiobutton.isSelected()) {
            query = "quantity";
        } else if (AuthorUpdateRadiobutton.isSelected()) {
            query = "author";
        } else if (PublisherUpdateRadiobutton.isSelected()) {
            query = "publisher";
        } else {
            JOptionPane.showMessageDialog(this, "Please select an attribute to update.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        boolean ok = false;      
        for (Books b : Books.storage()){
            if (b.getID().equals(id)){
                ok = true;
                break;
            }
        }
        if (ok == false){
            JOptionPane.showMessageDialog(this, "Book ID does not match with the database", "Error", JOptionPane.ERROR_MESSAGE);
        }else
        {
            Admin.UPDATEBOOKS(id, query, updated_info);
            JOptionPane.showMessageDialog(this, "Book information updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }catch (IOException e){
        
    }
    
    }//GEN-LAST:event_UpdateBookInfobuttonActionPerformed

    private void AuthorUpdateRadiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorUpdateRadiobuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AuthorUpdateRadiobuttonActionPerformed

    private void PublisherUpdateRadiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PublisherUpdateRadiobuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PublisherUpdateRadiobuttonActionPerformed

    private void GenderUpdateRadiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenderUpdateRadiobuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GenderUpdateRadiobuttonActionPerformed

    private void NameUpdateRadiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameUpdateRadiobuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameUpdateRadiobuttonActionPerformed

    private void FindIDBook_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindIDBook_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FindIDBook_FieldActionPerformed

    private void FindIDBook_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindIDBook_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String id = FindIDBook_Field.getText();
            String category = FindCategory_Field.getText();
            String name = FindName_Field.getText();
            String author = FindAuthor_Field.getText();

            id = id.isEmpty() ? null : id;
            category = category.isEmpty() ? null : category;
            name = name.isEmpty() ? null : name;
            author = author.isEmpty() ? null : author;
            // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
            ArrayList<Books> filteredBooks = Admin.FINDBOOKS(id, name, category, author);
            DefaultTableModel model = (DefaultTableModel) FindTable.getModel();
            model.setRowCount(0);
            for (Books book : filteredBooks) {
            model.addRow(new Object[]{
                book.getID(),
                book.getName(),
                book.getCategory(),
                book.getPublisher(),
                book.getAuthor(),
                book.getQuantity()
            });
           }
        }
    }//GEN-LAST:event_FindIDBook_FieldKeyPressed

    private void FindName_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindName_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String id = FindIDBook_Field.getText();
            String category = FindCategory_Field.getText();
            String name = FindName_Field.getText();
            String author = FindAuthor_Field.getText();

            id = id.isEmpty() ? null : id;
            category = category.isEmpty() ? null : category;
            name = name.isEmpty() ? null : name;
            author = author.isEmpty() ? null : author;
            // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
            ArrayList<Books> filteredBooks = Admin.FINDBOOKS(id, name, category, author);
            DefaultTableModel model = (DefaultTableModel) FindTable.getModel();
            model.setRowCount(0);
            for (Books book : filteredBooks) {
            model.addRow(new Object[]{
                book.getID(),
                book.getName(),
                book.getCategory(),
                book.getPublisher(),
                book.getAuthor(),
                book.getQuantity()
            });
           }
        }
    }//GEN-LAST:event_FindName_FieldKeyPressed

    private void FindCategory_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindCategory_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String id = FindIDBook_Field.getText();
            String category = FindCategory_Field.getText();
            String name = FindName_Field.getText();
            String author = FindAuthor_Field.getText();

            id = id.isEmpty() ? null : id;
            category = category.isEmpty() ? null : category;
            name = name.isEmpty() ? null : name;
            author = author.isEmpty() ? null : author;
            // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
            ArrayList<Books> filteredBooks = Admin.FINDBOOKS(id, name, category, author);
            DefaultTableModel model = (DefaultTableModel) FindTable.getModel();
            model.setRowCount(0);
            for (Books book : filteredBooks) {
            model.addRow(new Object[]{
                book.getID(),
                book.getName(),
                book.getCategory(),
                book.getPublisher(),
                book.getAuthor(),
                book.getQuantity()
            });
           }
        }
    }//GEN-LAST:event_FindCategory_FieldKeyPressed

    private void FindAuthor_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindAuthor_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String id = FindIDBook_Field.getText();
            String category = FindCategory_Field.getText();
            String name = FindName_Field.getText();
            String author = FindAuthor_Field.getText();

            id = id.isEmpty() ? null : id;
            category = category.isEmpty() ? null : category;
            name = name.isEmpty() ? null : name;
            author = author.isEmpty() ? null : author;
            // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
            ArrayList<Books> filteredBooks = Admin.FINDBOOKS(id, name, category, author);
            DefaultTableModel model = (DefaultTableModel) FindTable.getModel();
            model.setRowCount(0);
            for (Books book : filteredBooks) {
            model.addRow(new Object[]{
                book.getID(),
                book.getName(),
                book.getCategory(),
                book.getPublisher(),
                book.getAuthor(),
                book.getQuantity()
            });
           }
        }
    }//GEN-LAST:event_FindAuthor_FieldKeyPressed

    private void NameBookUpdateRadiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameBookUpdateRadiobuttonActionPerformed
        
    }//GEN-LAST:event_NameBookUpdateRadiobuttonActionPerformed

    private void QuantityUpdateRadiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantityUpdateRadiobuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QuantityUpdateRadiobuttonActionPerformed

    private void IDBookUpdate_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDBookUpdate_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDBookUpdate_FieldActionPerformed

    private void FindUserbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindUserbuttonActionPerformed
        String cccd = FindUserCCCD_Field.getText();
        String name = FindUserName_Field.getText();
        String gender = FindUserGender_Field.getText();
        String contact_number = FindUserContact_number_Field.getText();
        
        cccd = cccd.isEmpty() ? null : cccd;
        gender = gender.isEmpty() ? null : gender;
        name = name.isEmpty() ? null : name;
        contact_number = contact_number.isEmpty() ? null : contact_number;
        // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
        ArrayList<Reader> filteredReaders = Admin.FINDREADERS(cccd, name, gender, contact_number);
        DefaultTableModel model = (DefaultTableModel) FindUserTable.getModel();
        model.setRowCount(0);
        for (Reader reader : filteredReaders) {
        model.addRow(new Object[]{
            reader.getCccd(),
            reader.getName(),
            reader.getGender(),
            reader.getContact_number(),
        });
    }
    }//GEN-LAST:event_FindUserbuttonActionPerformed

    private void Username_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Username_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Username_FieldActionPerformed

    private void Username_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Username_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (Username_Field.getText().isEmpty() || Gender_Field.getText().isEmpty() || CCCD_Field.getText().isEmpty() || Contactnumber_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            Username.requestFocus();
        }else{
            int ok = 0;
            String cccd = CCCD_Field.getText();
            String name = Username_Field.getText();
            String gender = Gender_Field.getText();
            String contact_number = Contactnumber_Field.getText();
            
            for (Reader r : Reader.ReadersList()){
                if (r.getCccd().equals(cccd)){
                    JOptionPane.showMessageDialog(null, "There's already an user with the same CCCD. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    CCCD_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Reader newReader = new Reader(cccd, name, gender, contact_number);
                Admin.ADDREADERS(newReader);
                JOptionPane.showMessageDialog(null, "Reader added to the library's database!","AddReader", JOptionPane.INFORMATION_MESSAGE);
                CCCD_Field.setText("");
                Username_Field.setText("");
                Gender_Field.setText("");
                Contactnumber_Field.setText("");
                }
            }
        }
    }//GEN-LAST:event_Username_FieldKeyPressed

    private void Gender_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Gender_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (Username_Field.getText().isEmpty() || Gender_Field.getText().isEmpty() || CCCD_Field.getText().isEmpty() || Contactnumber_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            Username.requestFocus();
        }else{
            int ok = 0;
            String cccd = CCCD_Field.getText();
            String name = Username_Field.getText();
            String gender = Gender_Field.getText();
            String contact_number = Contactnumber_Field.getText();
            
            for (Reader r : Reader.ReadersList()){
                if (r.getCccd().equals(cccd)){
                    JOptionPane.showMessageDialog(null, "There's already an user with the same CCCD. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    CCCD_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Reader newReader = new Reader(cccd, name, gender, contact_number);
                Admin.ADDREADERS(newReader);
                JOptionPane.showMessageDialog(null, "Reader added to the library's database!","AddReader", JOptionPane.INFORMATION_MESSAGE);
                CCCD_Field.setText("");
                Username_Field.setText("");
                Gender_Field.setText("");
                Contactnumber_Field.setText("");
                }
            }
        }
    }//GEN-LAST:event_Gender_FieldKeyPressed

    private void CCCD_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CCCD_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (Username_Field.getText().isEmpty() || Gender_Field.getText().isEmpty() || CCCD_Field.getText().isEmpty() || Contactnumber_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            Username.requestFocus();
        }else{
            int ok = 0;
            String cccd = CCCD_Field.getText();
            String name = Username_Field.getText();
            String gender = Gender_Field.getText();
            String contact_number = Contactnumber_Field.getText();
            
            for (Reader r : Reader.ReadersList()){
                if (r.getCccd().equals(cccd)){
                    JOptionPane.showMessageDialog(null, "There's already an user with the same CCCD. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    CCCD_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Reader newReader = new Reader(cccd, name, gender, contact_number);
                Admin.ADDREADERS(newReader);
                JOptionPane.showMessageDialog(null, "Reader added to the library's database!","AddReader", JOptionPane.INFORMATION_MESSAGE);
                CCCD_Field.setText("");
                Username_Field.setText("");
                Gender_Field.setText("");
                Contactnumber_Field.setText("");
                }
            }
        }
    }//GEN-LAST:event_CCCD_FieldKeyPressed

    private void Contactnumber_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Contactnumber_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (Username_Field.getText().isEmpty() || Gender_Field.getText().isEmpty() || CCCD_Field.getText().isEmpty() || Contactnumber_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            Username.requestFocus();
        }else{
            int ok = 0;
            String cccd = CCCD_Field.getText();
            String name = Username_Field.getText();
            String gender = Gender_Field.getText();
            String contact_number = Contactnumber_Field.getText();
            
            for (Reader r : Reader.ReadersList()){
                if (r.getCccd().equals(cccd)){
                    JOptionPane.showMessageDialog(null, "There's already an user with the same CCCD. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    CCCD_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Reader newReader = new Reader(cccd, name, gender, contact_number);
                Admin.ADDREADERS(newReader);
                JOptionPane.showMessageDialog(null, "Reader added to the library's database!","AddReader", JOptionPane.INFORMATION_MESSAGE);
                CCCD_Field.setText("");
                Username_Field.setText("");
                Gender_Field.setText("");
                Contactnumber_Field.setText("");
                }
            }
        }
    }//GEN-LAST:event_Contactnumber_FieldKeyPressed

    private void removeID_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_removeID_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            try{
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove this book from the database?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (confirm == JOptionPane.YES_OPTION){
                if (Admin.REMOVEBOOKS(removeID_Field.getText()) == true){
                    JOptionPane.showMessageDialog(null, "Book removed successfully!","Book removed", JOptionPane.INFORMATION_MESSAGE);
                }
                else 
                {
                    JOptionPane.showMessageDialog(null, "Book does not exist!","Error", JOptionPane.ERROR_MESSAGE);
                    removeID_Field.requestFocus();
                }
                removeID_Field.setText("");
            }
            else{
                removeID_Field.requestFocus();
            }
        }catch (IOException e){
            
        }
        }
    }//GEN-LAST:event_removeID_FieldKeyPressed

    private void UserRemove_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UserRemove_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove this reader from the database?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION){
            if (Admin.REMOVEREADERS(UserRemove_Field.getText()) == true){
                JOptionPane.showMessageDialog(null, "Reader removed successfully!","Book removed", JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Reader does not exist!","Error", JOptionPane.ERROR_MESSAGE);
                UserRemove_Field.requestFocus();
            }
            UserRemove_Field.setText("");
        }
        else{
            UserRemove_Field.requestFocus();
        }
        }
    }//GEN-LAST:event_UserRemove_FieldKeyPressed

    private void FindUserCCCD_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindUserCCCD_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String cccd = FindUserCCCD_Field.getText();
        String name = FindUserName_Field.getText();
        String gender = FindUserGender_Field.getText();
        String contact_number = FindUserContact_number_Field.getText();
        
        cccd = cccd.isEmpty() ? null : cccd;
        gender = gender.isEmpty() ? null : gender;
        name = name.isEmpty() ? null : name;
        contact_number = contact_number.isEmpty() ? null : contact_number;
        // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
        ArrayList<Reader> filteredReaders = Admin.FINDREADERS(cccd, name, gender, contact_number);
        DefaultTableModel model = (DefaultTableModel) FindUserTable.getModel();
        model.setRowCount(0);
        for (Reader reader : filteredReaders) {
        model.addRow(new Object[]{
            reader.getCccd(),
            reader.getName(),
            reader.getGender(),
            reader.getContact_number(),
        });
    }
        }
    }//GEN-LAST:event_FindUserCCCD_FieldKeyPressed

    private void FindUserGender_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindUserGender_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String cccd = FindUserCCCD_Field.getText();
        String name = FindUserName_Field.getText();
        String gender = FindUserGender_Field.getText();
        String contact_number = FindUserContact_number_Field.getText();
        
        cccd = cccd.isEmpty() ? null : cccd;
        gender = gender.isEmpty() ? null : gender;
        name = name.isEmpty() ? null : name;
        contact_number = contact_number.isEmpty() ? null : contact_number;
        // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
        ArrayList<Reader> filteredReaders = Admin.FINDREADERS(cccd, name, gender, contact_number);
        DefaultTableModel model = (DefaultTableModel) FindUserTable.getModel();
        model.setRowCount(0);
        for (Reader reader : filteredReaders) {
        model.addRow(new Object[]{
            reader.getCccd(),
            reader.getName(),
            reader.getGender(),
            reader.getContact_number(),
        });
    }
        }
    }//GEN-LAST:event_FindUserGender_FieldKeyPressed

    private void FindUserName_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindUserName_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String cccd = FindUserCCCD_Field.getText();
        String name = FindUserName_Field.getText();
        String gender = FindUserGender_Field.getText();
        String contact_number = FindUserContact_number_Field.getText();
        
        cccd = cccd.isEmpty() ? null : cccd;
        gender = gender.isEmpty() ? null : gender;
        name = name.isEmpty() ? null : name;
        contact_number = contact_number.isEmpty() ? null : contact_number;
        // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
        ArrayList<Reader> filteredReaders = Admin.FINDREADERS(cccd, name, gender, contact_number);
        DefaultTableModel model = (DefaultTableModel) FindUserTable.getModel();
        model.setRowCount(0);
        for (Reader reader : filteredReaders) {
        model.addRow(new Object[]{
            reader.getCccd(),
            reader.getName(),
            reader.getGender(),
            reader.getContact_number(),
        });
    }
        }
    }//GEN-LAST:event_FindUserName_FieldKeyPressed

    private void FindUserContact_number_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindUserContact_number_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String cccd = FindUserCCCD_Field.getText();
        String name = FindUserName_Field.getText();
        String gender = FindUserGender_Field.getText();
        String contact_number = FindUserContact_number_Field.getText();
        
        cccd = cccd.isEmpty() ? null : cccd;
        gender = gender.isEmpty() ? null : gender;
        name = name.isEmpty() ? null : name;
        contact_number = contact_number.isEmpty() ? null : contact_number;
        // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
        ArrayList<Reader> filteredReaders = Admin.FINDREADERS(cccd, name, gender, contact_number);
        DefaultTableModel model = (DefaultTableModel) FindUserTable.getModel();
        model.setRowCount(0);
        for (Reader reader : filteredReaders) {
        model.addRow(new Object[]{
            reader.getCccd(),
            reader.getName(),
            reader.getGender(),
            reader.getContact_number(),
        });
    }
        }
    }//GEN-LAST:event_FindUserContact_number_FieldKeyPressed

    private void CCCDReaderUpdate_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CCCDReaderUpdate_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String cccd = CCCDReaderUpdate_Field.getText();
            String updated_info = UpdateUserInfo_Field.getText();
            String query = null;
            if (cccd.isEmpty() || updated_info.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in both the User ID and the new information.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            //chọn thuộc tính update
            if (NameUpdateRadiobutton.isSelected()) {
                query = "name";
            } else if (ContactNumberUpdateRadiobutton.isSelected()) {
                query = "contact_number";
            } else if (GenderUpdateRadiobutton.isSelected()) {
                query = "gender";
            }  else {
                JOptionPane.showMessageDialog(this, "Please select an attribute to update.", "Selection Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
            boolean ok = false;
            for (Reader r : Reader.ReadersList()){
                if (r.getCccd().equals(cccd)){
                    ok = true;
                    
                    break;
                }
            }
            if (ok == false){
                JOptionPane.showMessageDialog(this, "User ID does not match with the database", "Error", JOptionPane.ERROR_MESSAGE);
            }else
            {
                Admin.UPDATEREADERS(cccd, query, updated_info);
                JOptionPane.showMessageDialog(this, "Reader's information updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_CCCDReaderUpdate_FieldKeyPressed

    private void UpdateUserInfobuttonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UpdateUserInfobuttonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String cccd = CCCDReaderUpdate_Field.getText();
            String updated_info = UpdateUserInfo_Field.getText();
            String query = null;
            if (cccd.isEmpty() || updated_info.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in both the User ID and the new information.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            //chọn thuộc tính update
            if (NameUpdateRadiobutton.isSelected()) {
                query = "name";
            } else if (ContactNumberUpdateRadiobutton.isSelected()) {
                query = "contact_number";
            } else if (GenderUpdateRadiobutton.isSelected()) {
                query = "gender";
            }  else {
                JOptionPane.showMessageDialog(this, "Please select an attribute to update.", "Selection Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
            boolean ok = false;
            for (Reader r : Reader.ReadersList()){
                if (r.getCccd().equals(cccd)){
                    ok = true;
                    
                    break;
                }
            }
            if (ok == false){
                JOptionPane.showMessageDialog(this, "Reader ID does not match with the database", "Error", JOptionPane.ERROR_MESSAGE);
            }else
            {
                Admin.UPDATEREADERS(cccd, query, updated_info);
                JOptionPane.showMessageDialog(this, "Reader's information updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_UpdateUserInfobuttonKeyPressed

    private void UpdateUserInfobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateUserInfobuttonActionPerformed
        String cccd = CCCDReaderUpdate_Field.getText();
        String updated_info = UpdateUserInfo_Field.getText();
        String query = null;
        if (cccd.isEmpty() || updated_info.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in both the User ID and the new information.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //chọn thuộc tính update
        if (NameUpdateRadiobutton.isSelected()) {
            query = "name";
        } else if (ContactNumberUpdateRadiobutton.isSelected()) {
            query = "contact_number";
        } else if (GenderUpdateRadiobutton.isSelected()) {
            query = "gender";
        }  else {
            JOptionPane.showMessageDialog(this, "Please select an attribute to update.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        boolean ok = false;
        for (Reader r : Reader.ReadersList()){
            if (r.getCccd().equals(cccd)){
                ok = true;

                break;
            }
        }
        if (ok == false){
            JOptionPane.showMessageDialog(this, "Reader does not exist in the database", "Error", JOptionPane.ERROR_MESSAGE);
        }else
        {
            Admin.UPDATEREADERS(cccd, query, updated_info);
            JOptionPane.showMessageDialog(this, "Reader's information updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_UpdateUserInfobuttonActionPerformed

    private void UpdateUserInfo_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateUserInfo_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdateUserInfo_FieldActionPerformed

    private void UpdateBookInfo_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UpdateBookInfo_FieldKeyPressed
       if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            try{
        String id = IDBookUpdate_Field.getText();
        String updated_info = UpdateBookInfo_Field.getText();
        String query = null;
        if (id.isEmpty() || updated_info.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in both the Book ID and the new information.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //chọn thuộc tính update
        if (NameBookUpdateRadiobutton.isSelected()) {
            query = "name";
        } else if (CategoryUpdateRadiobutton.isSelected()) {
            query = "category";
        } else if (QuantityUpdateRadiobutton.isSelected()) {
            query = "quantity";
        } else if (AuthorUpdateRadiobutton.isSelected()) {
            query = "author";
        } else if (PublisherUpdateRadiobutton.isSelected()) {
            query = "publisher";
        } else {
            JOptionPane.showMessageDialog(this, "Please select an attribute to update.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        boolean ok = false;      
        for (Books b : Books.storage()){
            if (b.getID().equals(id)){
                ok = true;
                
                break;
            }
        }
        if (ok == false){
            JOptionPane.showMessageDialog(this, "Book ID does not match with the database", "Error", JOptionPane.ERROR_MESSAGE);
        }else
        {
            Admin.UPDATEBOOKS(id, query, updated_info);
                JOptionPane.showMessageDialog(this, "Book information updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }catch (IOException e){
        
    }
        }
    }//GEN-LAST:event_UpdateBookInfo_FieldKeyPressed

    private void IDBookUpdate_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IDBookUpdate_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            try{
        String id = IDBookUpdate_Field.getText();
        String updated_info = UpdateBookInfo_Field.getText();
        String query = null;
        if (id.isEmpty() || updated_info.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in both the Book ID and the new information.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //chọn thuộc tính update
        if (NameBookUpdateRadiobutton.isSelected()) {
            query = "name";
        } else if (CategoryUpdateRadiobutton.isSelected()) {
            query = "category";
        } else if (QuantityUpdateRadiobutton.isSelected()) {
            query = "quantity";
        } else if (AuthorUpdateRadiobutton.isSelected()) {
            query = "author";
        } else if (PublisherUpdateRadiobutton.isSelected()) {
            query = "publisher";
        } else {
            JOptionPane.showMessageDialog(this, "Please select an attribute to update.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        boolean ok = false;      
        for (Books b : Books.storage()){
            if (b.getID().equals(id)){
                ok = true;
                
                break;
            }
        }
        if (ok == false){
            JOptionPane.showMessageDialog(this, "Book ID does not match with the database", "Error", JOptionPane.ERROR_MESSAGE);
        }else
        {
            Admin.UPDATEBOOKS(id, query, updated_info);
                JOptionPane.showMessageDialog(this, "Book information updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }catch (IOException e){
        
    }
        }
    }//GEN-LAST:event_IDBookUpdate_FieldKeyPressed

    private void AddTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTicketActionPerformed
        MenuMainScreen.setSelectedComponent(AddTickets);
    }//GEN-LAST:event_AddTicketActionPerformed

    private void RemoveTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveTicketActionPerformed
        MenuMainScreen.setSelectedComponent(RemoveTickets);
    }//GEN-LAST:event_RemoveTicketActionPerformed

    private void FindTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindTicketActionPerformed
        MenuMainScreen.setSelectedComponent(FindTickets);
        DefaultTableModel ticketTable = new DefaultTableModel(
        new Object[]{"TicketID", "CCCD", "BookID", "Borrow Date", "Return Date", "Status", "Note"}, 0
    );
        Collections.sort(Ticket.getTicketList());
        for (Ticket t : Ticket.getTicketList()) {
        ticketTable.addRow(new Object[]{
            t.getTicketID(),t.getReaderCCCD(),t.getBookID(),t.getBorrow_dateAsString(),t.getReturn_dateAsString(),t.getStatus(),t.getNote()
        });
    }
    TicketBorrowTable.setModel(ticketTable);
    }//GEN-LAST:event_FindTicketActionPerformed

    private void UpdateTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateTicketActionPerformed
        MenuMainScreen.setSelectedComponent(UpdateTickets);
    }//GEN-LAST:event_UpdateTicketActionPerformed

    private void ReturnTicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnTicketButtonActionPerformed
        String readerID = CCCDTicket_Field.getText();
        String bookID = BookIDTicket_Field.getText();
        String ticketID = TicketID_Field.getText();
        String status = (String)StatusComboBox.getSelectedItem();
        
        
        
        readerID = readerID.isEmpty() ? null : readerID;
        bookID = bookID.isEmpty() ? null : bookID;
        ticketID = ticketID.isEmpty() ? null : ticketID;
        status = (status == null || status.equals("<none>")) ? null : status;
        // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
        ArrayList<Ticket> filteredTickets = Admin.FINDTICKETS(ticketID, readerID, bookID, status);
        DefaultTableModel model = (DefaultTableModel) TicketBorrowTable.getModel();
        model.setRowCount(0);
        for (Ticket ticket : filteredTickets) {
        model.addRow(new Object[]{
            ticket.getTicketID(),
            ticket.getReaderCCCD(),
            ticket.getBookID(),
            ticket.getBorrow_dateAsString(),
            ticket.getReturn_dateAsString(),
            ticket.getStatus(),
            ticket.getNote()
        });
    }
        TicketBorrowTable.setModel(model);
    }//GEN-LAST:event_ReturnTicketButtonActionPerformed
    public String setString(String s){
        String[] a = s.split("/");
        s = "";
        while (a[0].length() < 2) a[0] = "0" + a[0];
        s += a[0] + "/";
        while (a[1].length() < 2) a[1] = "0" + a[1];
        s += a[1] + "/";
        while (a[2].length() < 4) a[2] = "0" + a[2];
        s += a[2];

        return s;
    }
    private void AddTicketbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTicketbuttonActionPerformed
        if (AddTicketID_Field.getText().isEmpty() || AddBook_ID_Ticket_Field.getText().isEmpty() || AddTicketCCCD_Field.getText().isEmpty() || AddBorrow_Date_Field.getText().isEmpty() || AddReturn_Date_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            AddTicketID_Field.requestFocus();
        }else{
            int ok = 0;
            int okcccd = 0;
            int okbookid = 0;
            String ticketID = AddTicketID_Field.getText();
            String bookID = AddBook_ID_Ticket_Field.getText();
            String cccd = AddTicketCCCD_Field.getText();
            String borrow_date_as_string = setString(AddBorrow_Date_Field.getText());
            String return_date_as_string = setString(AddReturn_Date_Field.getText());
            String note = AddNoteTicket_Field.getText().isEmpty() ? "<no note>" : AddNoteTicket_Field.getText(); //if note field is empty, note = "<no note>", otherwise note = textfield
            LocalDate borrow_date = LocalDate.parse(borrow_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate return_date = LocalDate.parse(return_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            String status = "";
            for (Reader r : Reader.ReadersList()){
                if (cccd.equals(r.getCccd())){
                    okcccd = 1; //tim thay nguoi dung
                    break;
                }
            }
            for (Books b : Books.storage()){
                if (bookID.equals(b.getID()) && b.getQuantity() != 0){
                    okbookid = 1; //tim thay sach'
                    break;
                }
            }
            if (return_date.isBefore(borrow_date) || return_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Return date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (borrow_date.isAfter(return_date) || borrow_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Borrow date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okcccd == 0){
                JOptionPane.showMessageDialog(null, "Ticket must be created for a registered Reader. Please check the ReaderID","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okbookid == 0){
                JOptionPane.showMessageDialog(null, "This book does not exist or is not available for request","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else{
                if (return_date.isAfter(LocalDate.now())) status = "Not Returned";
                else if (return_date.equals(LocalDate.now())) status = "Due Today";
            }
            for (Ticket t : Ticket.getTicketList()){
                if (t.getTicketID().equals(ticketID)){
                    JOptionPane.showMessageDialog(null, "There's already a ticket with the same ID. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    AddTicketID_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Ticket ticket = new Ticket(ticketID, cccd, bookID, borrow_date, return_date, status, note);
                Admin.ADDTICKETS(ticket);
                JOptionPane.showMessageDialog(null, "Ticket added to the library's database!","AddTicket", JOptionPane.INFORMATION_MESSAGE);
                for (Books b : Books.storage()){
                    if (b.getID().equals(bookID)){
                        try {
                            Admin.UPDATEBOOKS(b.getID(), "quantity", String.valueOf(b.getQuantity()-1));
                        } catch (IOException ex) {
                            Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                    }
                }
                AddTicketID_Field.setText("");
                AddBook_ID_Ticket_Field.setText("");
                AddTicketCCCD_Field.setText("");
                AddBorrow_Date_Field.setText("");
                AddReturn_Date_Field.setText("");
                AddNoteTicket_Field.setText("");
            }
        }
    }//GEN-LAST:event_AddTicketbuttonActionPerformed

    private void AddTicketID_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTicketID_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddTicketID_FieldActionPerformed

    private void removeID_Field1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_removeID_Field1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove this ticket from the database?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION){
            String id = removeID_Field1.getText();
            String bookID = "";
            String getBookQuantity = "";
            for (Ticket t : Ticket.getTicketList()){
                if (t.getTicketID().equals(id)){
                    bookID = t.getBookID();
                }
            }
            if (Admin.REMOVETICKETS(removeID_Field1.getText()) == true){
                for (Books b : Books.storage()){
                    if (b.getID().equals(bookID)){
                        getBookQuantity = String.valueOf(b.getQuantity() + 1);   
                    }
                }
                try {
                    Admin.UPDATEBOOKS(bookID, "quantity", getBookQuantity);
                } catch (IOException ex) {
                    Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(null, "Ticket removed successfully!","Ticket removed", JOptionPane.INFORMATION_MESSAGE);

            }
            else
            {
                JOptionPane.showMessageDialog(null, "Ticket does not exist!","Error", JOptionPane.ERROR_MESSAGE);
                removeID_Field.requestFocus();
            }
            removeID_Field.setText("");
        }
        else{
            removeID_Field.requestFocus();
        }
        }
    }//GEN-LAST:event_removeID_Field1KeyPressed

    private void RemoveBookbutton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBookbutton1ActionPerformed
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove this ticket from the database?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION){
            String id = removeID_Field1.getText();
            String bookID = "";
            String getBookQuantity = "";
            for (Ticket t : Ticket.getTicketList()){
                if (t.getTicketID().equals(id)){
                    bookID = t.getBookID();
                }
            }
            if (Admin.REMOVETICKETS(removeID_Field1.getText()) == true){
                for (Books b : Books.storage()){
                    if (b.getID().equals(bookID)){
                        getBookQuantity = String.valueOf(b.getQuantity() + 1);   
                    }
                }
                try {
                    Admin.UPDATEBOOKS(bookID, "quantity", getBookQuantity);
                } catch (IOException ex) {
                    Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(null, "Ticket removed successfully!","Ticket removed", JOptionPane.INFORMATION_MESSAGE);

            }
            else
            {
                JOptionPane.showMessageDialog(null, "Ticket does not exist!","Error", JOptionPane.ERROR_MESSAGE);
                removeID_Field.requestFocus();
            }
            removeID_Field.setText("");
        }
        else{
            removeID_Field.requestFocus();
        }
    }//GEN-LAST:event_RemoveBookbutton1ActionPerformed

    private void TicketIDUpdate_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TicketIDUpdate_FieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TicketIDUpdate_FieldKeyPressed

    private void BookIDUpdateradiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookIDUpdateradiobuttonActionPerformed
        StatusComboBox1.setVisible(false);
        UpdateTicketInfo_Field.setVisible(true);
    }//GEN-LAST:event_BookIDUpdateradiobuttonActionPerformed

    private void Borrow_dateUpdateradiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Borrow_dateUpdateradiobuttonActionPerformed
        StatusComboBox1.setVisible(false);
        UpdateTicketInfo_Field.setVisible(true);
    }//GEN-LAST:event_Borrow_dateUpdateradiobuttonActionPerformed

    private void CCCDUpdateradiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CCCDUpdateradiobuttonActionPerformed
        StatusComboBox1.setVisible(false);
        UpdateTicketInfo_Field.setVisible(true);
    }//GEN-LAST:event_CCCDUpdateradiobuttonActionPerformed

    private void UpdateTicketInfo_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateTicketInfo_FieldActionPerformed

    }//GEN-LAST:event_UpdateTicketInfo_FieldActionPerformed

    private void UpdateUserInfobutton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateUserInfobutton1ActionPerformed
        String id = TicketIDUpdate_Field.getText();
        String updated_info = UpdateTicketInfo_Field.getText();
        String status_update = (String)StatusComboBox1.getSelectedItem();
        String query = null;
        if ((id.isEmpty() || updated_info.isEmpty()) && !StatusUpdateradiobutton.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please fill in both the Ticket ID and the new information.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        boolean ok = false;
        LocalDate getBorrowDate = null;
        LocalDate getReturnDate = null;
        for (Ticket t : Ticket.getTicketList()){
            if (t.getTicketID().equals(id)){
                ok = true;
                getBorrowDate = t.getBorrow_date();
                getReturnDate = t.getReturn_date();
                break;
            }
        }
        //chọn thuộc tính update
        if (CCCDUpdateradiobutton.isSelected()) {
            query = "cccd";
        } else if (BookIDUpdateradiobutton.isSelected()) {
            query = "bookID";
        } else if (Borrow_dateUpdateradiobutton.isSelected()) {
            query = "borrow_date";
        } else if (Return_dateUpdateradiobutton.isSelected()) {
            query = "return_date";
        } else if (StatusUpdateradiobutton.isSelected()) {
            query = "status";
            updated_info = status_update;
        } else if (NoteUpdateRadiobutton.isSelected()){
            query = "note";
        }
        else {
            JOptionPane.showMessageDialog(this, "Please select an attribute to update.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
              
        if (query.equals("borrow_date") && LocalDate.parse(Ticket.normalize(updated_info),DateTimeFormatter.ofPattern("dd/MM/yyyy")).isAfter(getReturnDate)){
            JOptionPane.showMessageDialog(this, "Borrow date cannot be after Return date", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if (query.equals("return_date") && LocalDate.parse(Ticket.normalize(updated_info),DateTimeFormatter.ofPattern("dd/MM/yyyy")).isBefore(getBorrowDate)){
            JOptionPane.showMessageDialog(this, "Return date cannot be before Borrow date", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (ok == false){
            JOptionPane.showMessageDialog(this, "Ticket ID does not match with the database", "Error", JOptionPane.ERROR_MESSAGE);
        }else
        {
            Admin.UPDATETICKETS(id, query, updated_info);
            JOptionPane.showMessageDialog(this, "Ticket information updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_UpdateUserInfobutton1ActionPerformed

    private void UpdateUserInfobutton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UpdateUserInfobutton1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdateUserInfobutton1KeyPressed

    private void Return_dateUpdateradiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Return_dateUpdateradiobuttonActionPerformed
        StatusComboBox1.setVisible(false);
        UpdateTicketInfo_Field.setVisible(true);
    }//GEN-LAST:event_Return_dateUpdateradiobuttonActionPerformed

    private void StatusUpdateradiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusUpdateradiobuttonActionPerformed
        StatusComboBox1.setVisible(true);
        UpdateTicketInfo_Field.setVisible(false);
    }//GEN-LAST:event_StatusUpdateradiobuttonActionPerformed

    private void StatusComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusComboBox1ActionPerformed

    }//GEN-LAST:event_StatusComboBox1ActionPerformed

    private void NoteUpdateRadiobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoteUpdateRadiobuttonActionPerformed
        StatusComboBox1.setVisible(false);
        UpdateTicketInfo_Field.setVisible(true);
    }//GEN-LAST:event_NoteUpdateRadiobuttonActionPerformed

    private void AddTicketID_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddTicketID_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (AddTicketID_Field.getText().isEmpty() || AddBook_ID_Ticket_Field.getText().isEmpty() || AddTicketCCCD_Field.getText().isEmpty() || AddBorrow_Date_Field.getText().isEmpty() || AddReturn_Date_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            AddTicketID_Field.requestFocus();
        }else{
            int ok = 0;
            int okcccd = 0;
            int okbookid = 0;
            String ticketID = AddTicketID_Field.getText();
            String bookID = AddBook_ID_Ticket_Field.getText();
            String cccd = AddTicketCCCD_Field.getText();
            String borrow_date_as_string = setString(AddBorrow_Date_Field.getText());
            String return_date_as_string = setString(AddReturn_Date_Field.getText());
            String note = AddNoteTicket_Field.getText().isEmpty() ? "<no note>" : AddNoteTicket_Field.getText(); //if note field is empty, note = "<no note>", otherwise note = textfield
            LocalDate borrow_date = LocalDate.parse(borrow_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate return_date = LocalDate.parse(return_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            String status = "";
            for (Reader r : Reader.ReadersList()){
                if (cccd.equals(r.getCccd())){
                    okcccd = 1; 
                    break;
                }
            }
            for (Books b : Books.storage()){
                if (bookID.equals(b.getID()) && b.getQuantity() != 0){
                    okbookid = 1;
                    break;
                }
            }
            if (return_date.isBefore(borrow_date) || return_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Return date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (borrow_date.isAfter(return_date) || borrow_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Borrow date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okcccd == 0){
                JOptionPane.showMessageDialog(null, "Ticket must be created for a registered Reader. Please check the ReaderID","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okbookid == 0){
                JOptionPane.showMessageDialog(null, "This book does not exist or is not available for request","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else{
                if (return_date.isAfter(LocalDate.now())) status = "Not Returned";
                else if (return_date.equals(LocalDate.now())) status = "Due Today";
            }
            for (Ticket t : Ticket.getTicketList()){
                if (t.getTicketID().equals(ticketID)){
                    JOptionPane.showMessageDialog(null, "There's already a ticket with the same ID. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    AddTicketID_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Ticket ticket = new Ticket(ticketID, cccd, bookID, borrow_date, return_date, status, note);
                Admin.ADDTICKETS(ticket);
                JOptionPane.showMessageDialog(null, "Ticket added to the library's database!","AddTicket", JOptionPane.INFORMATION_MESSAGE);
                for (Books b : Books.storage()){
                    try {
                            Admin.UPDATEBOOKS(b.getID(), "quantity", String.valueOf(b.getQuantity()-1));
                        } catch (IOException ex) {
                            Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                AddTicketID_Field.setText("");
                AddBook_ID_Ticket_Field.setText("");
                AddTicketCCCD_Field.setText("");
                AddBorrow_Date_Field.setText("");
                AddReturn_Date_Field.setText("");
                AddNoteTicket_Field.setText("");
            }
        }
        }
    }//GEN-LAST:event_AddTicketID_FieldKeyPressed

    private void AddBook_ID_Ticket_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddBook_ID_Ticket_FieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (AddTicketID_Field.getText().isEmpty() || AddBook_ID_Ticket_Field.getText().isEmpty() || AddTicketCCCD_Field.getText().isEmpty() || AddBorrow_Date_Field.getText().isEmpty() || AddReturn_Date_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            AddTicketID_Field.requestFocus();
        }else{
            int ok = 0;
            int okcccd = 0;
            int okbookid = 0;
            String ticketID = AddTicketID_Field.getText();
            String bookID = AddBook_ID_Ticket_Field.getText();
            String cccd = AddTicketCCCD_Field.getText();
            String borrow_date_as_string = setString(AddBorrow_Date_Field.getText());
            String return_date_as_string = setString(AddReturn_Date_Field.getText());
            String note = AddNoteTicket_Field.getText().isEmpty() ? "<no note>" : AddNoteTicket_Field.getText(); //if note field is empty, note = "<no note>", otherwise note = textfield
            LocalDate borrow_date = LocalDate.parse(borrow_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate return_date = LocalDate.parse(return_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            String status = "";
            for (Reader r : Reader.ReadersList()){
                if (cccd.equals(r.getCccd())){
                    okcccd = 1; 
                    break;
                }
            }
            for (Books b : Books.storage()){
                if (bookID.equals(b.getID()) && b.getQuantity() != 0){
                    okbookid = 1;
                    break;
                }
            }
            if (return_date.isBefore(borrow_date) || return_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Return date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (borrow_date.isAfter(return_date) || borrow_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Borrow date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okcccd == 0){
                JOptionPane.showMessageDialog(null, "Ticket must be created for a registered Reader. Please check the ReaderID","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okbookid == 0){
                JOptionPane.showMessageDialog(null, "This book does not exist or is not available for request","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else{
                if (return_date.isAfter(LocalDate.now())) status = "Not Returned";
                else if (return_date.equals(LocalDate.now())) status = "Due Today";
            }
            for (Ticket t : Ticket.getTicketList()){
                if (t.getTicketID().equals(ticketID)){
                    JOptionPane.showMessageDialog(null, "There's already a ticket with the same ID. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    AddTicketID_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Ticket ticket = new Ticket(ticketID, cccd, bookID, borrow_date, return_date, status, note);
                Admin.ADDTICKETS(ticket);
                JOptionPane.showMessageDialog(null, "Ticket added to the library's database!","AddTicket", JOptionPane.INFORMATION_MESSAGE);
                for (Books b : Books.storage()){
                    try {
                            Admin.UPDATEBOOKS(b.getID(), "quantity", String.valueOf(b.getQuantity()-1));
                        } catch (IOException ex) {
                            Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                AddTicketID_Field.setText("");
                AddBook_ID_Ticket_Field.setText("");
                AddTicketCCCD_Field.setText("");
                AddBorrow_Date_Field.setText("");
                AddReturn_Date_Field.setText("");
                AddNoteTicket_Field.setText("");
            }
        }
        }
    }//GEN-LAST:event_AddBook_ID_Ticket_FieldKeyPressed

    private void AddTicketCCCD_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddTicketCCCD_FieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (AddTicketID_Field.getText().isEmpty() || AddBook_ID_Ticket_Field.getText().isEmpty() || AddTicketCCCD_Field.getText().isEmpty() || AddBorrow_Date_Field.getText().isEmpty() || AddReturn_Date_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            AddTicketID_Field.requestFocus();
        }else{
            int ok = 0;
            int okcccd = 0;
            int okbookid = 0;
            String ticketID = AddTicketID_Field.getText();
            String bookID = AddBook_ID_Ticket_Field.getText();
            String cccd = AddTicketCCCD_Field.getText();
            String borrow_date_as_string = setString(AddBorrow_Date_Field.getText());
            String return_date_as_string = setString(AddReturn_Date_Field.getText());
            String note = AddNoteTicket_Field.getText().isEmpty() ? "<no note>" : AddNoteTicket_Field.getText(); //if note field is empty, note = "<no note>", otherwise note = textfield
            LocalDate borrow_date = LocalDate.parse(borrow_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate return_date = LocalDate.parse(return_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            String status = "";
            for (Reader r : Reader.ReadersList()){
                if (cccd.equals(r.getCccd())){
                    okcccd = 1; 
                    break;
                }
            }
            for (Books b : Books.storage()){
                if (bookID.equals(b.getID()) && b.getQuantity() != 0){
                    okbookid = 1;
                    break;
                }
            }
            if (return_date.isBefore(borrow_date) || return_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Return date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (borrow_date.isAfter(return_date) || borrow_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Borrow date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okcccd == 0){
                JOptionPane.showMessageDialog(null, "Ticket must be created for a registered Reader. Please check the ReaderID","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okbookid == 0){
                JOptionPane.showMessageDialog(null, "This book does not exist or is not available for request","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else{
                if (return_date.isAfter(LocalDate.now())) status = "Not Returned";
                else if (return_date.equals(LocalDate.now())) status = "Due Today";
            }
            for (Ticket t : Ticket.getTicketList()){
                if (t.getTicketID().equals(ticketID)){
                    JOptionPane.showMessageDialog(null, "There's already a ticket with the same ID. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    AddTicketID_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Ticket ticket = new Ticket(ticketID, cccd, bookID, borrow_date, return_date, status, note);
                Admin.ADDTICKETS(ticket);
                JOptionPane.showMessageDialog(null, "Ticket added to the library's database!","AddTicket", JOptionPane.INFORMATION_MESSAGE);
                for (Books b : Books.storage()){
                    try {
                            Admin.UPDATEBOOKS(b.getID(), "quantity", String.valueOf(b.getQuantity()-1));
                        } catch (IOException ex) {
                            Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                AddTicketID_Field.setText("");
                AddBook_ID_Ticket_Field.setText("");
                AddTicketCCCD_Field.setText("");
                AddBorrow_Date_Field.setText("");
                AddReturn_Date_Field.setText("");
                AddNoteTicket_Field.setText("");
            }
        }
        }
    }//GEN-LAST:event_AddTicketCCCD_FieldKeyPressed

    private void AddBorrow_Date_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddBorrow_Date_FieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (AddTicketID_Field.getText().isEmpty() || AddBook_ID_Ticket_Field.getText().isEmpty() || AddTicketCCCD_Field.getText().isEmpty() || AddBorrow_Date_Field.getText().isEmpty() || AddReturn_Date_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            AddTicketID_Field.requestFocus();
        }else{
            int ok = 0;
            int okcccd = 0;
            int okbookid = 0;
            String ticketID = AddTicketID_Field.getText();
            String bookID = AddBook_ID_Ticket_Field.getText();
            String cccd = AddTicketCCCD_Field.getText();
            String borrow_date_as_string = setString(AddBorrow_Date_Field.getText());
            String return_date_as_string = setString(AddReturn_Date_Field.getText());
            String note = AddNoteTicket_Field.getText().isEmpty() ? "<no note>" : AddNoteTicket_Field.getText(); //if note field is empty, note = "<no note>", otherwise note = textfield
            LocalDate borrow_date = LocalDate.parse(borrow_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate return_date = LocalDate.parse(return_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            String status = "";
            for (Reader r : Reader.ReadersList()){
                if (cccd.equals(r.getCccd())){
                    okcccd = 1; 
                    break;
                }
            }
            for (Books b : Books.storage()){
                if (bookID.equals(b.getID()) && b.getQuantity() != 0){
                    okbookid = 1;
                    break;
                }
            }
            if (return_date.isBefore(borrow_date) || return_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Return date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (borrow_date.isAfter(return_date) || borrow_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Borrow date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okcccd == 0){
                JOptionPane.showMessageDialog(null, "Ticket must be created for a registered Reader. Please check the ReaderID","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okbookid == 0){
                JOptionPane.showMessageDialog(null, "This book does not exist or is not available for request","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else{
                if (return_date.isAfter(LocalDate.now())) status = "Not Returned";
                else if (return_date.equals(LocalDate.now())) status = "Due Today";
            }
            for (Ticket t : Ticket.getTicketList()){
                if (t.getTicketID().equals(ticketID)){
                    JOptionPane.showMessageDialog(null, "There's already a ticket with the same ID. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    AddTicketID_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Ticket ticket = new Ticket(ticketID, cccd, bookID, borrow_date, return_date, status, note);
                Admin.ADDTICKETS(ticket);
                JOptionPane.showMessageDialog(null, "Ticket added to the library's database!","AddTicket", JOptionPane.INFORMATION_MESSAGE);
                for (Books b : Books.storage()){
                    try {
                            Admin.UPDATEBOOKS(b.getID(), "quantity", String.valueOf(b.getQuantity()-1));
                        } catch (IOException ex) {
                            Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                AddTicketID_Field.setText("");
                AddBook_ID_Ticket_Field.setText("");
                AddTicketCCCD_Field.setText("");
                AddBorrow_Date_Field.setText("");
                AddReturn_Date_Field.setText("");
                AddNoteTicket_Field.setText("");
            }
        }        
        }
    }//GEN-LAST:event_AddBorrow_Date_FieldKeyPressed

    private void AddReturn_Date_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddReturn_Date_FieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (AddTicketID_Field.getText().isEmpty() || AddBook_ID_Ticket_Field.getText().isEmpty() || AddTicketCCCD_Field.getText().isEmpty() || AddBorrow_Date_Field.getText().isEmpty() || AddReturn_Date_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            AddTicketID_Field.requestFocus();
        }else{
            int ok = 0;
            int okcccd = 0;
            int okbookid = 0;
            String ticketID = AddTicketID_Field.getText();
            String bookID = AddBook_ID_Ticket_Field.getText();
            String cccd = AddTicketCCCD_Field.getText();
            String borrow_date_as_string = setString(AddBorrow_Date_Field.getText());
            String return_date_as_string = setString(AddReturn_Date_Field.getText());
            String note = AddNoteTicket_Field.getText().isEmpty() ? "<no note>" : AddNoteTicket_Field.getText(); //if note field is empty, note = "<no note>", otherwise note = textfield
            LocalDate borrow_date = LocalDate.parse(borrow_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate return_date = LocalDate.parse(return_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            String status = "";
            for (Reader r : Reader.ReadersList()){
                if (cccd.equals(r.getCccd())){
                    okcccd = 1; 
                    break;
                }
            }
            for (Books b : Books.storage()){
                if (bookID.equals(b.getID()) && b.getQuantity() != 0){
                    okbookid = 1;
                    break;
                }
            }
            if (return_date.isBefore(borrow_date) || return_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Return date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (borrow_date.isAfter(return_date) || borrow_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Borrow date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okcccd == 0){
                JOptionPane.showMessageDialog(null, "Ticket must be created for a registered Reader. Please check the ReaderID","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okbookid == 0){
                JOptionPane.showMessageDialog(null, "This book does not exist or is not available for request","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else{
                if (return_date.isAfter(LocalDate.now())) status = "Not Returned";
                else if (return_date.equals(LocalDate.now())) status = "Due Today";
            }
            for (Ticket t : Ticket.getTicketList()){
                if (t.getTicketID().equals(ticketID)){
                    JOptionPane.showMessageDialog(null, "There's already a ticket with the same ID. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    AddTicketID_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Ticket ticket = new Ticket(ticketID, cccd, bookID, borrow_date, return_date, status, note);
                Admin.ADDTICKETS(ticket);
                JOptionPane.showMessageDialog(null, "Ticket added to the library's database!","AddTicket", JOptionPane.INFORMATION_MESSAGE);
                for (Books b : Books.storage()){
                    try {
                            Admin.UPDATEBOOKS(b.getID(), "quantity", String.valueOf(b.getQuantity()-1));
                        } catch (IOException ex) {
                            Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                AddTicketID_Field.setText("");
                AddBook_ID_Ticket_Field.setText("");
                AddTicketCCCD_Field.setText("");
                AddBorrow_Date_Field.setText("");
                AddReturn_Date_Field.setText("");
                AddNoteTicket_Field.setText("");
            }
        }
        }
    }//GEN-LAST:event_AddReturn_Date_FieldKeyPressed

    private void AddNoteTicket_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddNoteTicket_FieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (AddTicketID_Field.getText().isEmpty() || AddBook_ID_Ticket_Field.getText().isEmpty() || AddTicketCCCD_Field.getText().isEmpty() || AddBorrow_Date_Field.getText().isEmpty() || AddReturn_Date_Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            AddTicketID_Field.requestFocus();
        }else{
            int ok = 0;
            int okcccd = 0;
            int okbookid = 0;
            String ticketID = AddTicketID_Field.getText();
            String bookID = AddBook_ID_Ticket_Field.getText();
            String cccd = AddTicketCCCD_Field.getText();
            String borrow_date_as_string = setString(AddBorrow_Date_Field.getText());
            String return_date_as_string = setString(AddReturn_Date_Field.getText());
            String note = AddNoteTicket_Field.getText().isEmpty() ? "<no note>" : AddNoteTicket_Field.getText(); //if note field is empty, note = "<no note>", otherwise note = textfield
            LocalDate borrow_date = LocalDate.parse(borrow_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate return_date = LocalDate.parse(return_date_as_string, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            String status = "";
            for (Reader r : Reader.ReadersList()){
                if (cccd.equals(r.getCccd())){
                    okcccd = 1; 
                    break;
                }
            }
            for (Books b : Books.storage()){
                if (bookID.equals(b.getID()) && b.getQuantity() != 0){
                    okbookid = 1;
                    break;
                }
            }
            if (return_date.isBefore(borrow_date) || return_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Return date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (borrow_date.isAfter(return_date) || borrow_date.isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(null, "Borrow date is invalid","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okcccd == 0){
                JOptionPane.showMessageDialog(null, "Ticket must be created for a registered Reader. Please check the ReaderID","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else if (okbookid == 0){
                JOptionPane.showMessageDialog(null, "This book does not exist or is not available for request","Error", JOptionPane.ERROR_MESSAGE);
                AddTicketID_Field.requestFocus();
                return;
            }
            else{
                if (return_date.isAfter(LocalDate.now())) status = "Not Returned";
                else if (return_date.equals(LocalDate.now())) status = "Due Today";
            }
            for (Ticket t : Ticket.getTicketList()){
                if (t.getTicketID().equals(ticketID)){
                    JOptionPane.showMessageDialog(null, "There's already a ticket with the same ID. Please change ID","Error", JOptionPane.ERROR_MESSAGE);
                    AddTicketID_Field.requestFocus();
                    ok++;
                    break;
                }
            }
            if (ok == 0){
                Ticket ticket = new Ticket(ticketID, cccd, bookID, borrow_date, return_date, status, note);
                Admin.ADDTICKETS(ticket);
                JOptionPane.showMessageDialog(null, "Ticket added to the library's database!","AddTicket", JOptionPane.INFORMATION_MESSAGE);
                for (Books b : Books.storage()){
                    try {
                            Admin.UPDATEBOOKS(b.getID(), "quantity", String.valueOf(b.getQuantity()-1));
                        } catch (IOException ex) {
                            Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                AddTicketID_Field.setText("");
                AddBook_ID_Ticket_Field.setText("");
                AddTicketCCCD_Field.setText("");
                AddBorrow_Date_Field.setText("");
                AddReturn_Date_Field.setText("");
                AddNoteTicket_Field.setText("");
            }
        }
        }
    }//GEN-LAST:event_AddNoteTicket_FieldKeyPressed

    private void CCCDTicket_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CCCDTicket_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String readerID = CCCDTicket_Field.getText();
            String bookID = BookIDTicket_Field.getText();
            String ticketID = TicketID_Field.getText();
            String status = (String)StatusComboBox.getSelectedItem();

            readerID = readerID.isEmpty() ? null : readerID;
            bookID = bookID.isEmpty() ? null : bookID;
            ticketID = ticketID.isEmpty() ? null : ticketID;
            status = (status == null || status.equals("<none>")) ? null : status;
            // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
            ArrayList<Ticket> filteredTickets = Admin.FINDTICKETS(ticketID, readerID, bookID, status);
            for (Ticket t : filteredTickets){
                System.out.print(t + " ");
            }
            DefaultTableModel model = (DefaultTableModel) TicketBorrowTable.getModel();
            model.setRowCount(0);
            for (Ticket ticket : filteredTickets) {
            model.addRow(new Object[]{
                ticket.getTicketID(),
                ticket.getReaderCCCD(),
                ticket.getBookID(),
                ticket.getBorrow_dateAsString(),
                ticket.getReturn_dateAsString(),
                ticket.getStatus(),
                ticket.getNote()
            });
        }
            TicketBorrowTable.setModel(model);
        }
    }//GEN-LAST:event_CCCDTicket_FieldKeyPressed

    private void TicketID_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TicketID_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String readerID = CCCDTicket_Field.getText();
            String bookID = BookIDTicket_Field.getText();
            String ticketID = TicketID_Field.getText();
            String status = (String)StatusComboBox.getSelectedItem();

            readerID = readerID.isEmpty() ? null : readerID;
            bookID = bookID.isEmpty() ? null : bookID;
            ticketID = ticketID.isEmpty() ? null : ticketID;
            status = (status == null || status.equals("<none>")) ? null : status;
            // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
            ArrayList<Ticket> filteredTickets = Admin.FINDTICKETS(ticketID, readerID, bookID, status);
            for (Ticket t : filteredTickets){
                System.out.print(t + " ");
            }
            DefaultTableModel model = (DefaultTableModel) TicketBorrowTable.getModel();
            model.setRowCount(0);
            for (Ticket ticket : filteredTickets) {
            model.addRow(new Object[]{
                ticket.getTicketID(),
                ticket.getReaderCCCD(),
                ticket.getBookID(),
                ticket.getBorrow_dateAsString(),
                ticket.getReturn_dateAsString(),
                ticket.getStatus(),
                ticket.getNote()
            });
        }
            TicketBorrowTable.setModel(model);
        }
    }//GEN-LAST:event_TicketID_FieldKeyPressed

    private void BookIDTicket_FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BookIDTicket_FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            String readerID = CCCDTicket_Field.getText();
            String bookID = BookIDTicket_Field.getText();
            String ticketID = TicketID_Field.getText();
            String status = (String)StatusComboBox.getSelectedItem();

            readerID = readerID.isEmpty() ? null : readerID;
            bookID = bookID.isEmpty() ? null : bookID;
            ticketID = ticketID.isEmpty() ? null : ticketID;
            status = (status == null || status.equals("<none>")) ? null : status;
            // check xem mỗi field có trống không, nếu trống thì gán giá trị null cho nó
            ArrayList<Ticket> filteredTickets = Admin.FINDTICKETS(ticketID, readerID, bookID, status);
            for (Ticket t : filteredTickets){
                System.out.print(t + " ");
            }
            DefaultTableModel model = (DefaultTableModel) TicketBorrowTable.getModel();
            model.setRowCount(0);
            for (Ticket ticket : filteredTickets) {
            model.addRow(new Object[]{
                ticket.getTicketID(),
                ticket.getReaderCCCD(),
                ticket.getBookID(),
                ticket.getBorrow_dateAsString(),
                ticket.getReturn_dateAsString(),
                ticket.getStatus(),
                ticket.getNote()
            });
        }
            TicketBorrowTable.setModel(model);
        }
    }//GEN-LAST:event_BookIDTicket_FieldKeyPressed

    private void AddBorrow_Date_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBorrow_Date_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddBorrow_Date_FieldActionPerformed
    
    public JTextField getRemoveID_Field(){
        return removeID_Field;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ADDTicketCCCD;
    private javax.swing.JMenuItem AddBook;
    private javax.swing.JLabel AddBook_ID;
    private javax.swing.JTextField AddBook_ID_Ticket_Field;
    private javax.swing.JButton AddBookbutton;
    private javax.swing.JPanel AddBooks;
    private javax.swing.JLabel AddBorrow_Date;
    private javax.swing.JTextField AddBorrow_Date_Field;
    private javax.swing.JLabel AddNoteTicket;
    private javax.swing.JTextField AddNoteTicket_Field;
    private javax.swing.JMenuItem AddReader;
    private javax.swing.JPanel AddReaders;
    private javax.swing.JTextField AddReturn_Date_Field;
    private javax.swing.JLabel AddReturn_date;
    private javax.swing.JMenuItem AddTicket;
    private javax.swing.JTextField AddTicketCCCD_Field;
    private javax.swing.JTextField AddTicketID_Field;
    private javax.swing.JButton AddTicketbutton;
    private javax.swing.JPanel AddTickets;
    private javax.swing.JButton AddUserbutton;
    private javax.swing.JLabel Author;
    private javax.swing.JRadioButton AuthorUpdateRadiobutton;
    private javax.swing.JTextField Author_Field;
    private javax.swing.JLabel BookIDTicket;
    private javax.swing.JTextField BookIDTicket_Field;
    private javax.swing.JRadioButton BookIDUpdateradiobutton;
    private javax.swing.JPopupMenu BookPopUpMenu;
    private javax.swing.JLabel Book_Name;
    private javax.swing.JTextField Bookname_Field;
    private javax.swing.JRadioButton Borrow_dateUpdateradiobutton;
    private javax.swing.JLabel CCCD;
    private javax.swing.JLabel CCCDReaderUpdate;
    private javax.swing.JTextField CCCDReaderUpdate_Field;
    private javax.swing.JLabel CCCDTicket;
    private javax.swing.JTextField CCCDTicket_Field;
    private javax.swing.JRadioButton CCCDUpdateradiobutton;
    private javax.swing.JLabel CCCDUser;
    private javax.swing.JTextField CCCD_Field;
    private javax.swing.JLabel Category;
    private javax.swing.JRadioButton CategoryUpdateRadiobutton;
    private javax.swing.JTextField Category_Field;
    private javax.swing.ButtonGroup ChooseUpdateBookbuttongroup;
    private javax.swing.ButtonGroup ChooseUpdateTicketbuttongroup;
    private javax.swing.ButtonGroup ChooseUpdateUserbuttongroup;
    private javax.swing.JRadioButton ContactNumberUpdateRadiobutton;
    private javax.swing.JLabel Contact_number;
    private javax.swing.JTextField Contactnumber_Field;
    private javax.swing.JLabel FindAuthor;
    private javax.swing.JTextField FindAuthor_Field;
    private javax.swing.JMenuItem FindBook;
    private javax.swing.JLabel FindBookName;
    private javax.swing.JButton FindBookbutton;
    private javax.swing.JPanel FindBooks;
    private javax.swing.JLabel FindCategory;
    private javax.swing.JTextField FindCategory_Field;
    private javax.swing.JLabel FindGender;
    private javax.swing.JTextField FindIDBook_Field;
    private javax.swing.JLabel FindIDBooks;
    private javax.swing.JTextField FindName_Field;
    private javax.swing.JMenuItem FindReader;
    private javax.swing.JPanel FindReaders;
    private javax.swing.JScrollPane FindScrollpane;
    private javax.swing.JTable FindTable;
    private javax.swing.JPanel FindTablepanel;
    private javax.swing.JMenuItem FindTicket;
    private javax.swing.JPanel FindTickets;
    private javax.swing.JLabel FindUserCCCD;
    private javax.swing.JTextField FindUserCCCD_Field;
    private javax.swing.JTextField FindUserContact_number_Field;
    private javax.swing.JTextField FindUserGender_Field;
    private javax.swing.JLabel FindUserName;
    private javax.swing.JTextField FindUserName_Field;
    private javax.swing.JScrollPane FindUserScrollPane;
    private javax.swing.JTable FindUserTable;
    private javax.swing.JPanel FindUserTablepane;
    private javax.swing.JButton FindUserbutton;
    private javax.swing.JLabel Gender;
    private javax.swing.JRadioButton GenderUpdateRadiobutton;
    private javax.swing.JTextField Gender_Field;
    private javax.swing.JButton HomeButton;
    private javax.swing.JLabel ID;
    private javax.swing.JLabel IDBookUpdate;
    private javax.swing.JTextField IDBookUpdate_Field;
    private javax.swing.JLabel ID_BOOK;
    private javax.swing.JLabel ID_BOOK1;
    private javax.swing.JTextField ID_Field;
    private javax.swing.JTabbedPane MenuMainScreen;
    private javax.swing.JRadioButton NameBookUpdateRadiobutton;
    private javax.swing.JRadioButton NameUpdateRadiobutton;
    private javax.swing.JRadioButton NoteUpdateRadiobutton;
    private javax.swing.JLabel Publisher;
    private javax.swing.JRadioButton PublisherUpdateRadiobutton;
    private javax.swing.JTextField Publisher_Field;
    private javax.swing.JLabel Quantity;
    private javax.swing.JRadioButton QuantityUpdateRadiobutton;
    private javax.swing.JTextField Quantity_Field;
    private javax.swing.JPopupMenu ReaderPopUpMenu;
    private javax.swing.JMenuItem RemoveBook;
    private javax.swing.JButton RemoveBookbutton;
    private javax.swing.JButton RemoveBookbutton1;
    private javax.swing.JPanel RemoveBooks;
    private javax.swing.JMenuItem RemoveReader;
    private javax.swing.JPanel RemoveReaders;
    private javax.swing.JMenuItem RemoveTicket;
    private javax.swing.JPanel RemoveTickets;
    private javax.swing.JButton RemoveUserbutton;
    private javax.swing.JButton ReturnTicketButton;
    private javax.swing.JRadioButton Return_dateUpdateradiobutton;
    private javax.swing.JComboBox<String> StatusComboBox;
    private javax.swing.JComboBox<String> StatusComboBox1;
    private javax.swing.JRadioButton StatusUpdateradiobutton;
    private javax.swing.JPanel TicketBorrowPanel;
    private javax.swing.JScrollPane TicketBorrowScrollPane;
    private javax.swing.JTable TicketBorrowTable;
    private javax.swing.JLabel TicketID;
    private javax.swing.JLabel TicketIDUpdate;
    private javax.swing.JTextField TicketIDUpdate_Field;
    private javax.swing.JTextField TicketID_Field;
    private javax.swing.JPopupMenu TicketPopUpMenu;
    private javax.swing.JButton ToBookMenu;
    private javax.swing.JButton ToBorrowTicketMenu;
    private javax.swing.JButton ToLogOut;
    private javax.swing.JButton ToReaderMenu;
    private javax.swing.JMenuItem UpdateBook;
    private javax.swing.JTextField UpdateBookInfo_Field;
    private javax.swing.JButton UpdateBookInfobutton;
    private javax.swing.JPanel UpdateBookpanel;
    private javax.swing.JPanel UpdateBooks;
    private javax.swing.JMenuItem UpdateReader;
    private javax.swing.JPanel UpdateReaders;
    private javax.swing.JMenuItem UpdateTicket;
    private javax.swing.JTextField UpdateTicketInfo_Field;
    private javax.swing.JPanel UpdateTicketpanel;
    private javax.swing.JPanel UpdateTickets;
    private javax.swing.JTextField UpdateUserInfo_Field;
    private javax.swing.JButton UpdateUserInfobutton;
    private javax.swing.JButton UpdateUserInfobutton1;
    private javax.swing.JPanel UpdateUserpanel;
    private javax.swing.JTextField UserRemove_Field;
    private javax.swing.JLabel Username;
    private javax.swing.JTextField Username_Field;
    private javax.swing.JPanel Welcome;
    private javax.swing.JPanel content_menubackground;
    private javax.swing.JPanel design_by;
    private javax.swing.JLabel group_6;
    private javax.swing.JLabel home_icon;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel menu_background;
    private javax.swing.JLabel menubackground;
    private javax.swing.JTextField removeID_Field;
    private javax.swing.JTextField removeID_Field1;
    private javax.swing.JLabel welcomelabel;
    // End of variables declaration//GEN-END:variables
}
